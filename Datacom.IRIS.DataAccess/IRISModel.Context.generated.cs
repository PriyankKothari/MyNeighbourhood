//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Linq;
using Datacom.IRIS.DomainModel.Domain;

namespace Datacom.IRIS.DataAccess
{
    public partial class IRISContext : ObjectContext
    {
    	public const string ConnectionString = "name=IRISContext";
    	public const string ContainerName = "IRISContext";
    
    	#region Constructors
    
    	public IRISContext()
    		: base(ConnectionString, ContainerName)
    	{
    		Initialize();
    	}
    
    	public IRISContext(string connectionString)
    		: base(connectionString, ContainerName)
    	{
    		Initialize();
    	}
    
    	public IRISContext(EntityConnection connection)
    		: base(connection, ContainerName)
    	{
    		Initialize();
    	}
    
    	private void Initialize()
    	{
    		// Creating proxies requires the use of the ProxyDataContractResolver and
    		// may allow lazy loading which can expand the loaded graph during serialization.
    		ContextOptions.ProxyCreationEnabled = false;
    		ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
    
    		//Set command timeout if it has been defined in the web.config
    		string commandTimeout = Datacom.IRIS.Common.Utils.GlobalUtils.GetAppSettingsValue(Datacom.IRIS.Common.ConfigSettings.DatabaseCommandTimeout);
    		int? customisedCommandTimeout = Datacom.IRIS.Common.Utils.GlobalUtils.ToNullableInt32(commandTimeout);
    		if (customisedCommandTimeout.HasValue)
    			this.CommandTimeout = customisedCommandTimeout.Value;
    	}
    
    	private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
    	{
    		var entity = e.Entity as IObjectWithChangeTracker;
    		if (entity != null)
    		{
    			bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
    			try
    			{
    				entity.MarkAsUnchanged();
    			}
    			finally
    			{
    				entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
    			}
    			this.StoreReferenceKeyValues(entity);
    		}
    	}
    
    	#endregion
    
        #region ObjectSet Properties
    
    	public ObjectSet<Address> Address
    	{
    		get { return _address  ?? (_address = CreateObjectSet<Address>("Address")); }
    	}
    	private ObjectSet<Address> _address;
    
    	public ObjectSet<Contact> Contact
    	{
    		get { return _contact  ?? (_contact = CreateObjectSet<Contact>("Contact")); }
    	}
    	private ObjectSet<Contact> _contact;
    
    	public ObjectSet<ContactAddress> ContactAddress
    	{
    		get { return _contactAddress  ?? (_contactAddress = CreateObjectSet<ContactAddress>("ContactAddress")); }
    	}
    	private ObjectSet<ContactAddress> _contactAddress;
    
    	public ObjectSet<Email> Email
    	{
    		get { return _email  ?? (_email = CreateObjectSet<Email>("Email")); }
    	}
    	private ObjectSet<Email> _email;
    
    	public ObjectSet<Name> Name
    	{
    		get { return _name  ?? (_name = CreateObjectSet<Name>("Name")); }
    	}
    	private ObjectSet<Name> _name;
    
    	public ObjectSet<Website> Website
    	{
    		get { return _website  ?? (_website = CreateObjectSet<Website>("Website")); }
    	}
    	private ObjectSet<Website> _website;
    
    	public ObjectSet<Note> Note
    	{
    		get { return _note  ?? (_note = CreateObjectSet<Note>("Note")); }
    	}
    	private ObjectSet<Note> _note;
    
    	public ObjectSet<ActivityObjectRelationship> ActivityObjectRelationship
    	{
    		get { return _activityObjectRelationship  ?? (_activityObjectRelationship = CreateObjectSet<ActivityObjectRelationship>("ActivityObjectRelationship")); }
    	}
    	private ObjectSet<ActivityObjectRelationship> _activityObjectRelationship;
    
    	public ObjectSet<Location> Location
    	{
    		get { return _location  ?? (_location = CreateObjectSet<Location>("Location")); }
    	}
    	private ObjectSet<Location> _location;
    
    	public ObjectSet<IRISMessage> IRISMessage
    	{
    		get { return _iRISMessage  ?? (_iRISMessage = CreateObjectSet<IRISMessage>("IRISMessage")); }
    	}
    	private ObjectSet<IRISMessage> _iRISMessage;
    
    	public ObjectSet<Favourite> Favourite
    	{
    		get { return _favourite  ?? (_favourite = CreateObjectSet<Favourite>("Favourite")); }
    	}
    	private ObjectSet<Favourite> _favourite;
    
    	public ObjectSet<Delegation> Delegation
    	{
    		get { return _delegation  ?? (_delegation = CreateObjectSet<Delegation>("Delegation")); }
    	}
    	private ObjectSet<Delegation> _delegation;
    
    	public ObjectSet<IRISBusinessIDPattern> IRISBusinessIDPattern
    	{
    		get { return _iRISBusinessIDPattern  ?? (_iRISBusinessIDPattern = CreateObjectSet<IRISBusinessIDPattern>("IRISBusinessIDPattern")); }
    	}
    	private ObjectSet<IRISBusinessIDPattern> _iRISBusinessIDPattern;
    
    	public ObjectSet<ContactSubLink> ContactSubLink
    	{
    		get { return _contactSubLink  ?? (_contactSubLink = CreateObjectSet<ContactSubLink>("ContactSubLink")); }
    	}
    	private ObjectSet<ContactSubLink> _contactSubLink;
    
    	public ObjectSet<LocationGroup> LocationGroup
    	{
    		get { return _locationGroup  ?? (_locationGroup = CreateObjectSet<LocationGroup>("LocationGroup")); }
    	}
    	private ObjectSet<LocationGroup> _locationGroup;
    
    	public ObjectSet<TaskDefinition> TaskDefinitions
    	{
    		get { return _taskDefinitions  ?? (_taskDefinitions = CreateObjectSet<TaskDefinition>("TaskDefinitions")); }
    	}
    	private ObjectSet<TaskDefinition> _taskDefinitions;
    
    	public ObjectSet<WorkflowDefinition> WorkflowDefinitions
    	{
    		get { return _workflowDefinitions  ?? (_workflowDefinitions = CreateObjectSet<WorkflowDefinition>("WorkflowDefinitions")); }
    	}
    	private ObjectSet<WorkflowDefinition> _workflowDefinitions;
    
    	public ObjectSet<Function> Function
    	{
    		get { return _function  ?? (_function = CreateObjectSet<Function>("Function")); }
    	}
    	private ObjectSet<Function> _function;
    
    	public ObjectSet<Group> Group
    	{
    		get { return _group  ?? (_group = CreateObjectSet<Group>("Group")); }
    	}
    	private ObjectSet<Group> _group;
    
    	public ObjectSet<GroupPermission> GroupPermission
    	{
    		get { return _groupPermission  ?? (_groupPermission = CreateObjectSet<GroupPermission>("GroupPermission")); }
    	}
    	private ObjectSet<GroupPermission> _groupPermission;
    
    	public ObjectSet<Permission> Permission
    	{
    		get { return _permission  ?? (_permission = CreateObjectSet<Permission>("Permission")); }
    	}
    	private ObjectSet<Permission> _permission;
    
    	public ObjectSet<User> User
    	{
    		get { return _user  ?? (_user = CreateObjectSet<User>("User")); }
    	}
    	private ObjectSet<User> _user;
    
    	public ObjectSet<UserGroup> UserGroup
    	{
    		get { return _userGroup  ?? (_userGroup = CreateObjectSet<UserGroup>("UserGroup")); }
    	}
    	private ObjectSet<UserGroup> _userGroup;
    
    	public ObjectSet<ReferenceDataCollection> ReferenceDataCollection
    	{
    		get { return _referenceDataCollection  ?? (_referenceDataCollection = CreateObjectSet<ReferenceDataCollection>("ReferenceDataCollection")); }
    	}
    	private ObjectSet<ReferenceDataCollection> _referenceDataCollection;
    
    	public ObjectSet<ReferenceDataValue> ReferenceDataValue
    	{
    		get { return _referenceDataValue  ?? (_referenceDataValue = CreateObjectSet<ReferenceDataValue>("ReferenceDataValue")); }
    	}
    	private ObjectSet<ReferenceDataValue> _referenceDataValue;
    
    	public ObjectSet<FunctionObjectPermission> FunctionObjectPermission
    	{
    		get { return _functionObjectPermission  ?? (_functionObjectPermission = CreateObjectSet<FunctionObjectPermission>("FunctionObjectPermission")); }
    	}
    	private ObjectSet<FunctionObjectPermission> _functionObjectPermission;
    
    	public ObjectSet<IRISObject> IRISObject
    	{
    		get { return _iRISObject  ?? (_iRISObject = CreateObjectSet<IRISObject>("IRISObject")); }
    	}
    	private ObjectSet<IRISObject> _iRISObject;
    
    	public ObjectSet<ActivityObjectRelationshipType> ActivityObjectRelationshipType
    	{
    		get { return _activityObjectRelationshipType  ?? (_activityObjectRelationshipType = CreateObjectSet<ActivityObjectRelationshipType>("ActivityObjectRelationshipType")); }
    	}
    	private ObjectSet<ActivityObjectRelationshipType> _activityObjectRelationshipType;
    
    	public ObjectSet<ReferenceDataValueAttribute> ReferenceDataValueAttribute
    	{
    		get { return _referenceDataValueAttribute  ?? (_referenceDataValueAttribute = CreateObjectSet<ReferenceDataValueAttribute>("ReferenceDataValueAttribute")); }
    	}
    	private ObjectSet<ReferenceDataValueAttribute> _referenceDataValueAttribute;
    
    	public ObjectSet<DataSecurity> DataSecurity
    	{
    		get { return _dataSecurity  ?? (_dataSecurity = CreateObjectSet<DataSecurity>("DataSecurity")); }
    	}
    	private ObjectSet<DataSecurity> _dataSecurity;
    
    	public ObjectSet<AppSetting> AppSetting
    	{
    		get { return _appSetting  ?? (_appSetting = CreateObjectSet<AppSetting>("AppSetting")); }
    	}
    	private ObjectSet<AppSetting> _appSetting;
    
    	public ObjectSet<SearchIndex> SearchIndex
    	{
    		get { return _searchIndex  ?? (_searchIndex = CreateObjectSet<SearchIndex>("SearchIndex")); }
    	}
    	private ObjectSet<SearchIndex> _searchIndex;
    
    	public ObjectSet<SearchKeyword> SearchKeyword
    	{
    		get { return _searchKeyword  ?? (_searchKeyword = CreateObjectSet<SearchKeyword>("SearchKeyword")); }
    	}
    	private ObjectSet<SearchKeyword> _searchKeyword;
    
    	public ObjectSet<SearchResult> SearchResult
    	{
    		get { return _searchResult  ?? (_searchResult = CreateObjectSet<SearchResult>("SearchResult")); }
    	}
    	private ObjectSet<SearchResult> _searchResult;
    
    	public ObjectSet<SearchResultSpatial> SearchResultSpatial
    	{
    		get { return _searchResultSpatial  ?? (_searchResultSpatial = CreateObjectSet<SearchResultSpatial>("SearchResultSpatial")); }
    	}
    	private ObjectSet<SearchResultSpatial> _searchResultSpatial;
    
    	public ObjectSet<SearchTerm> SearchTerm
    	{
    		get { return _searchTerm  ?? (_searchTerm = CreateObjectSet<SearchTerm>("SearchTerm")); }
    	}
    	private ObjectSet<SearchTerm> _searchTerm;
    
    	public ObjectSet<TaskInstance> TaskInstances
    	{
    		get { return _taskInstances  ?? (_taskInstances = CreateObjectSet<TaskInstance>("TaskInstances")); }
    	}
    	private ObjectSet<TaskInstance> _taskInstances;
    
    	public ObjectSet<WorkflowInstance> WorkflowInstances
    	{
    		get { return _workflowInstances  ?? (_workflowInstances = CreateObjectSet<WorkflowInstance>("WorkflowInstances")); }
    	}
    	private ObjectSet<WorkflowInstance> _workflowInstances;
    
    	public ObjectSet<Calendar> Calendar
    	{
    		get { return _calendar  ?? (_calendar = CreateObjectSet<Calendar>("Calendar")); }
    	}
    	private ObjectSet<Calendar> _calendar;
    
    	public ObjectSet<Hold> Hold
    	{
    		get { return _hold  ?? (_hold = CreateObjectSet<Hold>("Hold")); }
    	}
    	private ObjectSet<Hold> _hold;
    
    	public ObjectSet<NonWorkDay> NonWorkDay
    	{
    		get { return _nonWorkDay  ?? (_nonWorkDay = CreateObjectSet<NonWorkDay>("NonWorkDay")); }
    	}
    	private ObjectSet<NonWorkDay> _nonWorkDay;
    
    	public ObjectSet<TimeFrame> TimeFrame
    	{
    		get { return _timeFrame  ?? (_timeFrame = CreateObjectSet<TimeFrame>("TimeFrame")); }
    	}
    	private ObjectSet<TimeFrame> _timeFrame;
    
    	public ObjectSet<HelpContent> HelpContent
    	{
    		get { return _helpContent  ?? (_helpContent = CreateObjectSet<HelpContent>("HelpContent")); }
    	}
    	private ObjectSet<HelpContent> _helpContent;
    
    	public ObjectSet<HelpLink> HelpLink
    	{
    		get { return _helpLink  ?? (_helpLink = CreateObjectSet<HelpLink>("HelpLink")); }
    	}
    	private ObjectSet<HelpLink> _helpLink;
    
    	public ObjectSet<Clock> Clock
    	{
    		get { return _clock  ?? (_clock = CreateObjectSet<Clock>("Clock")); }
    	}
    	private ObjectSet<Clock> _clock;
    
    	public ObjectSet<ObjectTypeCalendar> ObjectTypeCalendar
    	{
    		get { return _objectTypeCalendar  ?? (_objectTypeCalendar = CreateObjectSet<ObjectTypeCalendar>("ObjectTypeCalendar")); }
    	}
    	private ObjectSet<ObjectTypeCalendar> _objectTypeCalendar;
    
    	public ObjectSet<WorkflowSuspension> WorkflowSuspension
    	{
    		get { return _workflowSuspension  ?? (_workflowSuspension = CreateObjectSet<WorkflowSuspension>("WorkflowSuspension")); }
    	}
    	private ObjectSet<WorkflowSuspension> _workflowSuspension;
    
    	public ObjectSet<Activity> Activities
    	{
    		get { return _activities  ?? (_activities = CreateObjectSet<Activity>("Activities")); }
    	}
    	private ObjectSet<Activity> _activities;
    
    	public ObjectSet<Appeal> Appeals
    	{
    		get { return _appeals  ?? (_appeals = CreateObjectSet<Appeal>("Appeals")); }
    	}
    	private ObjectSet<Appeal> _appeals;
    
    	public ObjectSet<Application> Applications
    	{
    		get { return _applications  ?? (_applications = CreateObjectSet<Application>("Applications")); }
    	}
    	private ObjectSet<Application> _applications;
    
    	public ObjectSet<Objection> Objections
    	{
    		get { return _objections  ?? (_objections = CreateObjectSet<Objection>("Objections")); }
    	}
    	private ObjectSet<Objection> _objections;
    
    	public ObjectSet<ActivityCondition> ActivityConditions
    	{
    		get { return _activityConditions  ?? (_activityConditions = CreateObjectSet<ActivityCondition>("ActivityConditions")); }
    	}
    	private ObjectSet<ActivityCondition> _activityConditions;
    
    	public ObjectSet<ActivityOutcome> ActivityOutcomes
    	{
    		get { return _activityOutcomes  ?? (_activityOutcomes = CreateObjectSet<ActivityOutcome>("ActivityOutcomes")); }
    	}
    	private ObjectSet<ActivityOutcome> _activityOutcomes;
    
    	public ObjectSet<ActivitySpecialEventDate> ActivitySpecialEventDates
    	{
    		get { return _activitySpecialEventDates  ?? (_activitySpecialEventDates = CreateObjectSet<ActivitySpecialEventDate>("ActivitySpecialEventDates")); }
    	}
    	private ObjectSet<ActivitySpecialEventDate> _activitySpecialEventDates;
    
    	public ObjectSet<Authorisation> Authorisations
    	{
    		get { return _authorisations  ?? (_authorisations = CreateObjectSet<Authorisation>("Authorisations")); }
    	}
    	private ObjectSet<Authorisation> _authorisations;
    
    	public ObjectSet<AuthorisationCondition> AuthorisationConditions
    	{
    		get { return _authorisationConditions  ?? (_authorisationConditions = CreateObjectSet<AuthorisationCondition>("AuthorisationConditions")); }
    	}
    	private ObjectSet<AuthorisationCondition> _authorisationConditions;
    
    	public ObjectSet<AuthorisationSpecialEventDate> AuthorisationSpecialEventDates
    	{
    		get { return _authorisationSpecialEventDates  ?? (_authorisationSpecialEventDates = CreateObjectSet<AuthorisationSpecialEventDate>("AuthorisationSpecialEventDates")); }
    	}
    	private ObjectSet<AuthorisationSpecialEventDate> _authorisationSpecialEventDates;
    
    	public ObjectSet<Condition> Conditions
    	{
    		get { return _conditions  ?? (_conditions = CreateObjectSet<Condition>("Conditions")); }
    	}
    	private ObjectSet<Condition> _conditions;
    
    	public ObjectSet<Parameter> Parameters
    	{
    		get { return _parameters  ?? (_parameters = CreateObjectSet<Parameter>("Parameters")); }
    	}
    	private ObjectSet<Parameter> _parameters;
    
    	public ObjectSet<EmailTemplate> EmailTemplates
    	{
    		get { return _emailTemplates  ?? (_emailTemplates = CreateObjectSet<EmailTemplate>("EmailTemplates")); }
    	}
    	private ObjectSet<EmailTemplate> _emailTemplates;
    
    	public ObjectSet<WorkflowCallMapping> WorkflowCallMappings
    	{
    		get { return _workflowCallMappings  ?? (_workflowCallMappings = CreateObjectSet<WorkflowCallMapping>("WorkflowCallMappings")); }
    	}
    	private ObjectSet<WorkflowCallMapping> _workflowCallMappings;
    
    	public ObjectSet<OtherIdentifier> OtherIdentifiers
    	{
    		get { return _otherIdentifiers  ?? (_otherIdentifiers = CreateObjectSet<OtherIdentifier>("OtherIdentifiers")); }
    	}
    	private ObjectSet<OtherIdentifier> _otherIdentifiers;
    
    	public ObjectSet<ActivityPlan> ActivityPlans
    	{
    		get { return _activityPlans  ?? (_activityPlans = CreateObjectSet<ActivityPlan>("ActivityPlans")); }
    	}
    	private ObjectSet<ActivityPlan> _activityPlans;
    
    	public ObjectSet<AuthorisationPlan> AuthorisationPlans
    	{
    		get { return _authorisationPlans  ?? (_authorisationPlans = CreateObjectSet<AuthorisationPlan>("AuthorisationPlans")); }
    	}
    	private ObjectSet<AuthorisationPlan> _authorisationPlans;
    
    	public ObjectSet<Plan> Plans
    	{
    		get { return _plans  ?? (_plans = CreateObjectSet<Plan>("Plans")); }
    	}
    	private ObjectSet<Plan> _plans;
    
    	public ObjectSet<Policy> Policies
    	{
    		get { return _policies  ?? (_policies = CreateObjectSet<Policy>("Policies")); }
    	}
    	private ObjectSet<Policy> _policies;
    
    	public ObjectSet<RuleObjective> RuleObjectives
    	{
    		get { return _ruleObjectives  ?? (_ruleObjectives = CreateObjectSet<RuleObjective>("RuleObjectives")); }
    	}
    	private ObjectSet<RuleObjective> _ruleObjectives;
    
    	public ObjectSet<AuthorisationGroup> AuthorisationGroups
    	{
    		get { return _authorisationGroups  ?? (_authorisationGroups = CreateObjectSet<AuthorisationGroup>("AuthorisationGroups")); }
    	}
    	private ObjectSet<AuthorisationGroup> _authorisationGroups;
    
    	public ObjectSet<ConditionScheduleCondition> ConditionScheduleConditions
    	{
    		get { return _conditionScheduleConditions  ?? (_conditionScheduleConditions = CreateObjectSet<ConditionScheduleCondition>("ConditionScheduleConditions")); }
    	}
    	private ObjectSet<ConditionScheduleCondition> _conditionScheduleConditions;
    
    	public ObjectSet<ConditionSchedule> ConditionSchedules
    	{
    		get { return _conditionSchedules  ?? (_conditionSchedules = CreateObjectSet<ConditionSchedule>("ConditionSchedules")); }
    	}
    	private ObjectSet<ConditionSchedule> _conditionSchedules;
    
    	public ObjectSet<MilestoneDate> MilestoneDates
    	{
    		get { return _milestoneDates  ?? (_milestoneDates = CreateObjectSet<MilestoneDate>("MilestoneDates")); }
    	}
    	private ObjectSet<MilestoneDate> _milestoneDates;
    
    	public ObjectSet<TimeRecord> TimeRecords
    	{
    		get { return _timeRecords  ?? (_timeRecords = CreateObjectSet<TimeRecord>("TimeRecords")); }
    	}
    	private ObjectSet<TimeRecord> _timeRecords;
    
    	public ObjectSet<SearchHeader> SearchHeader
    	{
    		get { return _searchHeader  ?? (_searchHeader = CreateObjectSet<SearchHeader>("SearchHeader")); }
    	}
    	private ObjectSet<SearchHeader> _searchHeader;
    
    	public ObjectSet<AuthorisationCharge> AuthorisationCharge
    	{
    		get { return _authorisationCharge  ?? (_authorisationCharge = CreateObjectSet<AuthorisationCharge>("AuthorisationCharge")); }
    	}
    	private ObjectSet<AuthorisationCharge> _authorisationCharge;
    
    	public ObjectSet<ServiceAddress> ServiceAddresses
    	{
    		get { return _serviceAddresses  ?? (_serviceAddresses = CreateObjectSet<ServiceAddress>("ServiceAddresses")); }
    	}
    	private ObjectSet<ServiceAddress> _serviceAddresses;
    
    	public ObjectSet<WorkflowCallInstance> WorkflowCallInstances
    	{
    		get { return _workflowCallInstances  ?? (_workflowCallInstances = CreateObjectSet<WorkflowCallInstance>("WorkflowCallInstances")); }
    	}
    	private ObjectSet<WorkflowCallInstance> _workflowCallInstances;
    
    	public ObjectSet<InstancesTable> InstancesTable
    	{
    		get { return _instancesTable  ?? (_instancesTable = CreateObjectSet<InstancesTable>("InstancesTable")); }
    	}
    	private ObjectSet<InstancesTable> _instancesTable;
    
    	public ObjectSet<Status> Statuses
    	{
    		get { return _statuses  ?? (_statuses = CreateObjectSet<Status>("Statuses")); }
    	}
    	private ObjectSet<Status> _statuses;
    
    	public ObjectSet<WorkflowRunningInstance> WorkflowRunningInstances
    	{
    		get { return _workflowRunningInstances  ?? (_workflowRunningInstances = CreateObjectSet<WorkflowRunningInstance>("WorkflowRunningInstances")); }
    	}
    	private ObjectSet<WorkflowRunningInstance> _workflowRunningInstances;
    
    	public ObjectSet<LibraryCondition> LibraryCondition
    	{
    		get { return _libraryCondition  ?? (_libraryCondition = CreateObjectSet<LibraryCondition>("LibraryCondition")); }
    	}
    	private ObjectSet<LibraryCondition> _libraryCondition;
    
    	public ObjectSet<ThirdPartyInvolvement> ThirdPartyInvolvement
    	{
    		get { return _thirdPartyInvolvement  ?? (_thirdPartyInvolvement = CreateObjectSet<ThirdPartyInvolvement>("ThirdPartyInvolvement")); }
    	}
    	private ObjectSet<ThirdPartyInvolvement> _thirdPartyInvolvement;
    
    	public ObjectSet<OnlineServicesAccount> OnlineServicesAccount
    	{
    		get { return _onlineServicesAccount  ?? (_onlineServicesAccount = CreateObjectSet<OnlineServicesAccount>("OnlineServicesAccount")); }
    	}
    	private ObjectSet<OnlineServicesAccount> _onlineServicesAccount;
    
    	public ObjectSet<PhoneNumber> PhoneNumber
    	{
    		get { return _phoneNumber  ?? (_phoneNumber = CreateObjectSet<PhoneNumber>("PhoneNumber")); }
    	}
    	private ObjectSet<PhoneNumber> _phoneNumber;
    
    	public ObjectSet<AppealAppellant> AppealAppellants
    	{
    		get { return _appealAppellants  ?? (_appealAppellants = CreateObjectSet<AppealAppellant>("AppealAppellants")); }
    	}
    	private ObjectSet<AppealAppellant> _appealAppellants;
    
    	public ObjectSet<CustomLink> CustomLinks
    	{
    		get { return _customLinks  ?? (_customLinks = CreateObjectSet<CustomLink>("CustomLinks")); }
    	}
    	private ObjectSet<CustomLink> _customLinks;
    
    	public ObjectSet<MobileInspector> MobileInspectors
    	{
    		get { return _mobileInspectors  ?? (_mobileInspectors = CreateObjectSet<MobileInspector>("MobileInspectors")); }
    	}
    	private ObjectSet<MobileInspector> _mobileInspectors;
    
    	public ObjectSet<MobileInspectorFunction> MobileInspectorFunctions
    	{
    		get { return _mobileInspectorFunctions  ?? (_mobileInspectorFunctions = CreateObjectSet<MobileInspectorFunction>("MobileInspectorFunctions")); }
    	}
    	private ObjectSet<MobileInspectorFunction> _mobileInspectorFunctions;
    
    	public ObjectSet<ReferenceDataValueWording> ReferenceDataValueWordings
    	{
    		get { return _referenceDataValueWordings  ?? (_referenceDataValueWordings = CreateObjectSet<ReferenceDataValueWording>("ReferenceDataValueWordings")); }
    	}
    	private ObjectSet<ReferenceDataValueWording> _referenceDataValueWordings;
    
    	public ObjectSet<ObjectInspectionTypeMapping> ObjectInspectionTypeMappings
    	{
    		get { return _objectInspectionTypeMappings  ?? (_objectInspectionTypeMappings = CreateObjectSet<ObjectInspectionTypeMapping>("ObjectInspectionTypeMappings")); }
    	}
    	private ObjectSet<ObjectInspectionTypeMapping> _objectInspectionTypeMappings;
    
    	public ObjectSet<TaskDefinitionOutcomeMapping> TaskDefinitionOutcomeMappings
    	{
    		get { return _taskDefinitionOutcomeMappings  ?? (_taskDefinitionOutcomeMappings = CreateObjectSet<TaskDefinitionOutcomeMapping>("TaskDefinitionOutcomeMappings")); }
    	}
    	private ObjectSet<TaskDefinitionOutcomeMapping> _taskDefinitionOutcomeMappings;
    
    	public ObjectSet<RelatedAuthorisation> RelatedAuthorisations
    	{
    		get { return _relatedAuthorisations  ?? (_relatedAuthorisations = CreateObjectSet<RelatedAuthorisation>("RelatedAuthorisations")); }
    	}
    	private ObjectSet<RelatedAuthorisation> _relatedAuthorisations;
    
    	public ObjectSet<AdHocData> AdHocData
    	{
    		get { return _adHocData  ?? (_adHocData = CreateObjectSet<AdHocData>("AdHocData")); }
    	}
    	private ObjectSet<AdHocData> _adHocData;
    
    	public ObjectSet<Answer> Answer
    	{
    		get { return _answer  ?? (_answer = CreateObjectSet<Answer>("Answer")); }
    	}
    	private ObjectSet<Answer> _answer;
    
    	public ObjectSet<CDFList> CDFList
    	{
    		get { return _cDFList  ?? (_cDFList = CreateObjectSet<CDFList>("CDFList")); }
    	}
    	private ObjectSet<CDFList> _cDFList;
    
    	public ObjectSet<CDFListQuestionDefinition> CDFListQuestionDefinition
    	{
    		get { return _cDFListQuestionDefinition  ?? (_cDFListQuestionDefinition = CreateObjectSet<CDFListQuestionDefinition>("CDFListQuestionDefinition")); }
    	}
    	private ObjectSet<CDFListQuestionDefinition> _cDFListQuestionDefinition;
    
    	public ObjectSet<QuestionDefinition> QuestionDefinition
    	{
    		get { return _questionDefinition  ?? (_questionDefinition = CreateObjectSet<QuestionDefinition>("QuestionDefinition")); }
    	}
    	private ObjectSet<QuestionDefinition> _questionDefinition;
    
    	public ObjectSet<ExposedStoredProcedure> ExposedStoredProcedures
    	{
    		get { return _exposedStoredProcedures  ?? (_exposedStoredProcedures = CreateObjectSet<ExposedStoredProcedure>("ExposedStoredProcedures")); }
    	}
    	private ObjectSet<ExposedStoredProcedure> _exposedStoredProcedures;
    
    	public ObjectSet<SurveyCategory> SurveyCategories
    	{
    		get { return _surveyCategories  ?? (_surveyCategories = CreateObjectSet<SurveyCategory>("SurveyCategories")); }
    	}
    	private ObjectSet<SurveyCategory> _surveyCategories;
    
    	public ObjectSet<SurveyCategoryQuestionDefinition> SurveyCategoryQuestionDefinitions
    	{
    		get { return _surveyCategoryQuestionDefinitions  ?? (_surveyCategoryQuestionDefinitions = CreateObjectSet<SurveyCategoryQuestionDefinition>("SurveyCategoryQuestionDefinitions")); }
    	}
    	private ObjectSet<SurveyCategoryQuestionDefinition> _surveyCategoryQuestionDefinitions;
    
    	public ObjectSet<Survey> Surveys
    	{
    		get { return _surveys  ?? (_surveys = CreateObjectSet<Survey>("Surveys")); }
    	}
    	private ObjectSet<Survey> _surveys;
    
    	public ObjectSet<CDFFormattedAnswer> CDFFormattedAnswers
    	{
    		get { return _cDFFormattedAnswers  ?? (_cDFFormattedAnswers = CreateObjectSet<CDFFormattedAnswer>("CDFFormattedAnswers")); }
    	}
    	private ObjectSet<CDFFormattedAnswer> _cDFFormattedAnswers;
    
    	public ObjectSet<TaskMappedField> TaskMappedFields
    	{
    		get { return _taskMappedFields  ?? (_taskMappedFields = CreateObjectSet<TaskMappedField>("TaskMappedFields")); }
    	}
    	private ObjectSet<TaskMappedField> _taskMappedFields;
    
    	public ObjectSet<NavigationHistory> NavigationHistories
    	{
    		get { return _navigationHistories  ?? (_navigationHistories = CreateObjectSet<NavigationHistory>("NavigationHistories")); }
    	}
    	private ObjectSet<NavigationHistory> _navigationHistories;
    
    	public ObjectSet<Sequence> Sequence
    	{
    		get { return _sequence  ?? (_sequence = CreateObjectSet<Sequence>("Sequence")); }
    	}
    	private ObjectSet<Sequence> _sequence;
    
    	public ObjectSet<WarningMessage> WarningMessage
    	{
    		get { return _warningMessage  ?? (_warningMessage = CreateObjectSet<WarningMessage>("WarningMessage")); }
    	}
    	private ObjectSet<WarningMessage> _warningMessage;
    
    	public ObjectSet<IRISObjectDetail> IRISObjectDetails
    	{
    		get { return _iRISObjectDetails  ?? (_iRISObjectDetails = CreateObjectSet<IRISObjectDetail>("IRISObjectDetails")); }
    	}
    	private ObjectSet<IRISObjectDetail> _iRISObjectDetails;
    
    	public ObjectSet<ContactBulkLoadItem> ContactBulkLoadItems
    	{
    		get { return _contactBulkLoadItems  ?? (_contactBulkLoadItems = CreateObjectSet<ContactBulkLoadItem>("ContactBulkLoadItems")); }
    	}
    	private ObjectSet<ContactBulkLoadItem> _contactBulkLoadItems;
    
    	public ObjectSet<Inspection_Batch_Create> Inspection_Batch_Create
    	{
    		get { return _inspection_Batch_Create  ?? (_inspection_Batch_Create = CreateObjectSet<Inspection_Batch_Create>("Inspection_Batch_Create")); }
    	}
    	private ObjectSet<Inspection_Batch_Create> _inspection_Batch_Create;
    
    	public ObjectSet<LookupStreet> LookupStreet
    	{
    		get { return _lookupStreet  ?? (_lookupStreet = CreateObjectSet<LookupStreet>("LookupStreet")); }
    	}
    	private ObjectSet<LookupStreet> _lookupStreet;
    
    	public ObjectSet<LookupSuburb> LookupSuburb
    	{
    		get { return _lookupSuburb  ?? (_lookupSuburb = CreateObjectSet<LookupSuburb>("LookupSuburb")); }
    	}
    	private ObjectSet<LookupSuburb> _lookupSuburb;
    
    	public ObjectSet<LookupTownCity> LookupTownCity
    	{
    		get { return _lookupTownCity  ?? (_lookupTownCity = CreateObjectSet<LookupTownCity>("LookupTownCity")); }
    	}
    	private ObjectSet<LookupTownCity> _lookupTownCity;
    
    	public ObjectSet<ContactGroup> ContactGroup
    	{
    		get { return _contactGroup  ?? (_contactGroup = CreateObjectSet<ContactGroup>("ContactGroup")); }
    	}
    	private ObjectSet<ContactGroup> _contactGroup;
    
    	public ObjectSet<ContactGroupMember> ContactGroupMember
    	{
    		get { return _contactGroupMember  ?? (_contactGroupMember = CreateObjectSet<ContactGroupMember>("ContactGroupMember")); }
    	}
    	private ObjectSet<ContactGroupMember> _contactGroupMember;
    
    	public ObjectSet<ContactGroupQuestionDefinition> ContactGroupQuestionDefinition
    	{
    		get { return _contactGroupQuestionDefinition  ?? (_contactGroupQuestionDefinition = CreateObjectSet<ContactGroupQuestionDefinition>("ContactGroupQuestionDefinition")); }
    	}
    	private ObjectSet<ContactGroupQuestionDefinition> _contactGroupQuestionDefinition;
    
    	public ObjectSet<JFCAssociatedContact> JFCAssociatedContacts
    	{
    		get { return _jFCAssociatedContacts  ?? (_jFCAssociatedContacts = CreateObjectSet<JFCAssociatedContact>("JFCAssociatedContacts")); }
    	}
    	private ObjectSet<JFCAssociatedContact> _jFCAssociatedContacts;
    
    	public ObjectSet<ContactVerification> ContactVerifications
    	{
    		get { return _contactVerifications  ?? (_contactVerifications = CreateObjectSet<ContactVerification>("ContactVerifications")); }
    	}
    	private ObjectSet<ContactVerification> _contactVerifications;
    
    	public ObjectSet<Enforcement> Enforcements
    	{
    		get { return _enforcements  ?? (_enforcements = CreateObjectSet<Enforcement>("Enforcements")); }
    	}
    	private ObjectSet<Enforcement> _enforcements;
    
    	public ObjectSet<EnforcementAllegedOffence> EnforcementAllegedOffences
    	{
    		get { return _enforcementAllegedOffences  ?? (_enforcementAllegedOffences = CreateObjectSet<EnforcementAllegedOffence>("EnforcementAllegedOffences")); }
    	}
    	private ObjectSet<EnforcementAllegedOffence> _enforcementAllegedOffences;
    
    	public ObjectSet<EnforcementActionAllegedOffence> EnforcementActionAllegedOffences
    	{
    		get { return _enforcementActionAllegedOffences  ?? (_enforcementActionAllegedOffences = CreateObjectSet<EnforcementActionAllegedOffence>("EnforcementActionAllegedOffences")); }
    	}
    	private ObjectSet<EnforcementActionAllegedOffence> _enforcementActionAllegedOffences;
    
    	public ObjectSet<EnforcementActionOfficerResponsible> EnforcementActionOfficerResponsibles
    	{
    		get { return _enforcementActionOfficerResponsibles  ?? (_enforcementActionOfficerResponsibles = CreateObjectSet<EnforcementActionOfficerResponsible>("EnforcementActionOfficerResponsibles")); }
    	}
    	private ObjectSet<EnforcementActionOfficerResponsible> _enforcementActionOfficerResponsibles;
    
    	public ObjectSet<EnforcementActionProsecutionCharge> EnforcementActionProsecutionCharges
    	{
    		get { return _enforcementActionProsecutionCharges  ?? (_enforcementActionProsecutionCharges = CreateObjectSet<EnforcementActionProsecutionCharge>("EnforcementActionProsecutionCharges")); }
    	}
    	private ObjectSet<EnforcementActionProsecutionCharge> _enforcementActionProsecutionCharges;
    
    	public ObjectSet<EnforcementActionProsecutionSentence> EnforcementActionProsecutionSentences
    	{
    		get { return _enforcementActionProsecutionSentences  ?? (_enforcementActionProsecutionSentences = CreateObjectSet<EnforcementActionProsecutionSentence>("EnforcementActionProsecutionSentences")); }
    	}
    	private ObjectSet<EnforcementActionProsecutionSentence> _enforcementActionProsecutionSentences;
    
    	public ObjectSet<EnforcementActionRecipientOrRespondent> EnforcementActionRecipientOrRespondents
    	{
    		get { return _enforcementActionRecipientOrRespondents  ?? (_enforcementActionRecipientOrRespondents = CreateObjectSet<EnforcementActionRecipientOrRespondent>("EnforcementActionRecipientOrRespondents")); }
    	}
    	private ObjectSet<EnforcementActionRecipientOrRespondent> _enforcementActionRecipientOrRespondents;
    
    	public ObjectSet<EnforcementAllegedOffencePlan> EnforcementAllegedOffencePlans
    	{
    		get { return _enforcementAllegedOffencePlans  ?? (_enforcementAllegedOffencePlans = CreateObjectSet<EnforcementAllegedOffencePlan>("EnforcementAllegedOffencePlans")); }
    	}
    	private ObjectSet<EnforcementAllegedOffencePlan> _enforcementAllegedOffencePlans;
    
    	public ObjectSet<EnforcementAction> EnforcementActions
    	{
    		get { return _enforcementActions  ?? (_enforcementActions = CreateObjectSet<EnforcementAction>("EnforcementActions")); }
    	}
    	private ObjectSet<EnforcementAction> _enforcementActions;
    
    	public ObjectSet<EnforcementActionProsecutionDefendant> EnforcementActionProsecutionDefendants
    	{
    		get { return _enforcementActionProsecutionDefendants  ?? (_enforcementActionProsecutionDefendants = CreateObjectSet<EnforcementActionProsecutionDefendant>("EnforcementActionProsecutionDefendants")); }
    	}
    	private ObjectSet<EnforcementActionProsecutionDefendant> _enforcementActionProsecutionDefendants;
    
    	public ObjectSet<EnforcementAllegedOffenceOffender> EnforcementAllegedOffenceOffenders
    	{
    		get { return _enforcementAllegedOffenceOffenders  ?? (_enforcementAllegedOffenceOffenders = CreateObjectSet<EnforcementAllegedOffenceOffender>("EnforcementAllegedOffenceOffenders")); }
    	}
    	private ObjectSet<EnforcementAllegedOffenceOffender> _enforcementAllegedOffenceOffenders;
    
    	public ObjectSet<ManagementSite> ManagementSites
    	{
    		get { return _managementSites  ?? (_managementSites = CreateObjectSet<ManagementSite>("ManagementSites")); }
    	}
    	private ObjectSet<ManagementSite> _managementSites;
    
    	public ObjectSet<Species> Species
    	{
    		get { return _species  ?? (_species = CreateObjectSet<Species>("Species")); }
    	}
    	private ObjectSet<Species> _species;
    
    	public ObjectSet<MngtSiteLandTenure> MngtSiteLandTenures
    	{
    		get { return _mngtSiteLandTenures  ?? (_mngtSiteLandTenures = CreateObjectSet<MngtSiteLandTenure>("MngtSiteLandTenures")); }
    	}
    	private ObjectSet<MngtSiteLandTenure> _mngtSiteLandTenures;
    
    	public ObjectSet<MngtSiteLandManagementPlan> MngtSiteLandManagementPlans
    	{
    		get { return _mngtSiteLandManagementPlans  ?? (_mngtSiteLandManagementPlans = CreateObjectSet<MngtSiteLandManagementPlan>("MngtSiteLandManagementPlans")); }
    	}
    	private ObjectSet<MngtSiteLandManagementPlan> _mngtSiteLandManagementPlans;
    
    	public ObjectSet<MngtSiteBiodiversityConsvSpecies> MngtSiteBiodiversityConsvSpecies
    	{
    		get { return _mngtSiteBiodiversityConsvSpecies  ?? (_mngtSiteBiodiversityConsvSpecies = CreateObjectSet<MngtSiteBiodiversityConsvSpecies>("MngtSiteBiodiversityConsvSpecies")); }
    	}
    	private ObjectSet<MngtSiteBiodiversityConsvSpecies> _mngtSiteBiodiversityConsvSpecies;
    
    	public ObjectSet<MngtSiteBiodiversityEcoFeature> MngtSiteBiodiversityEcoFeatures
    	{
    		get { return _mngtSiteBiodiversityEcoFeatures  ?? (_mngtSiteBiodiversityEcoFeatures = CreateObjectSet<MngtSiteBiodiversityEcoFeature>("MngtSiteBiodiversityEcoFeatures")); }
    	}
    	private ObjectSet<MngtSiteBiodiversityEcoFeature> _mngtSiteBiodiversityEcoFeatures;
    
    	public ObjectSet<MngtSiteIndustryPurpose> MngtSiteIndustryPurposes
    	{
    		get { return _mngtSiteIndustryPurposes  ?? (_mngtSiteIndustryPurposes = CreateObjectSet<MngtSiteIndustryPurpose>("MngtSiteIndustryPurposes")); }
    	}
    	private ObjectSet<MngtSiteIndustryPurpose> _mngtSiteIndustryPurposes;
    
    	public ObjectSet<MngtSiteThreatSpecies> MngtSiteThreatSpecies
    	{
    		get { return _mngtSiteThreatSpecies  ?? (_mngtSiteThreatSpecies = CreateObjectSet<MngtSiteThreatSpecies>("MngtSiteThreatSpecies")); }
    	}
    	private ObjectSet<MngtSiteThreatSpecies> _mngtSiteThreatSpecies;
    
    	public ObjectSet<MngtSiteClassification> MngtSiteClassifications
    	{
    		get { return _mngtSiteClassifications  ?? (_mngtSiteClassifications = CreateObjectSet<MngtSiteClassification>("MngtSiteClassifications")); }
    	}
    	private ObjectSet<MngtSiteClassification> _mngtSiteClassifications;
    
    	public ObjectSet<MngtSiteOtherManagementIssue> MngtSiteOtherManagementIssues
    	{
    		get { return _mngtSiteOtherManagementIssues  ?? (_mngtSiteOtherManagementIssues = CreateObjectSet<MngtSiteOtherManagementIssue>("MngtSiteOtherManagementIssues")); }
    	}
    	private ObjectSet<MngtSiteOtherManagementIssue> _mngtSiteOtherManagementIssues;
    
    	public ObjectSet<MngtSiteSiteProtection> MngtSiteSiteProtections
    	{
    		get { return _mngtSiteSiteProtections  ?? (_mngtSiteSiteProtections = CreateObjectSet<MngtSiteSiteProtection>("MngtSiteSiteProtections")); }
    	}
    	private ObjectSet<MngtSiteSiteProtection> _mngtSiteSiteProtections;
    
    	public ObjectSet<SitePlan> SitePlans
    	{
    		get { return _sitePlans  ?? (_sitePlans = CreateObjectSet<SitePlan>("SitePlans")); }
    	}
    	private ObjectSet<SitePlan> _sitePlans;
    
    	public ObjectSet<SpeciesStatus> SpeciesStatus
    	{
    		get { return _speciesStatus  ?? (_speciesStatus = CreateObjectSet<SpeciesStatus>("SpeciesStatus")); }
    	}
    	private ObjectSet<SpeciesStatus> _speciesStatus;
    
    	public ObjectSet<Observation> Observations
    	{
    		get { return _observations  ?? (_observations = CreateObjectSet<Observation>("Observations")); }
    	}
    	private ObjectSet<Observation> _observations;
    
    	public ObjectSet<ObservationFurtherAction> ObservationFurtherActions
    	{
    		get { return _observationFurtherActions  ?? (_observationFurtherActions = CreateObjectSet<ObservationFurtherAction>("ObservationFurtherActions")); }
    	}
    	private ObjectSet<ObservationFurtherAction> _observationFurtherActions;
    
    	public ObjectSet<ObservationSelectedLandUseIndicator> ObservationSelectedLandUseIndicators
    	{
    		get { return _observationSelectedLandUseIndicators  ?? (_observationSelectedLandUseIndicators = CreateObjectSet<ObservationSelectedLandUseIndicator>("ObservationSelectedLandUseIndicators")); }
    	}
    	private ObjectSet<ObservationSelectedLandUseIndicator> _observationSelectedLandUseIndicators;
    
    	public ObjectSet<ObservationComplianceParameter> ObservationComplianceParameters
    	{
    		get { return _observationComplianceParameters  ?? (_observationComplianceParameters = CreateObjectSet<ObservationComplianceParameter>("ObservationComplianceParameters")); }
    	}
    	private ObjectSet<ObservationComplianceParameter> _observationComplianceParameters;
    
    	public ObjectSet<ObservationObservingOfficer> ObservationObservingOfficers
    	{
    		get { return _observationObservingOfficers  ?? (_observationObservingOfficers = CreateObjectSet<ObservationObservingOfficer>("ObservationObservingOfficers")); }
    	}
    	private ObjectSet<ObservationObservingOfficer> _observationObservingOfficers;
    
    	public ObjectSet<SpeciesType> SpeciesTypes
    	{
    		get { return _speciesTypes  ?? (_speciesTypes = CreateObjectSet<SpeciesType>("SpeciesTypes")); }
    	}
    	private ObjectSet<SpeciesType> _speciesTypes;
    
    	public ObjectSet<ObservationMngtSpeciesCount> ObservationMngtSpeciesCounts
    	{
    		get { return _observationMngtSpeciesCounts  ?? (_observationMngtSpeciesCounts = CreateObjectSet<ObservationMngtSpeciesCount>("ObservationMngtSpeciesCounts")); }
    	}
    	private ObjectSet<ObservationMngtSpeciesCount> _observationMngtSpeciesCounts;
    
    	public ObjectSet<ObservationMngtSpeciesCountItem> ObservationMngtSpeciesCountItems
    	{
    		get { return _observationMngtSpeciesCountItems  ?? (_observationMngtSpeciesCountItems = CreateObjectSet<ObservationMngtSpeciesCountItem>("ObservationMngtSpeciesCountItems")); }
    	}
    	private ObjectSet<ObservationMngtSpeciesCountItem> _observationMngtSpeciesCountItems;
    
    	public ObjectSet<ObservationMngtSitePlan> ObservationMngtSitePlans
    	{
    		get { return _observationMngtSitePlans  ?? (_observationMngtSitePlans = CreateObjectSet<ObservationMngtSitePlan>("ObservationMngtSitePlans")); }
    	}
    	private ObjectSet<ObservationMngtSitePlan> _observationMngtSitePlans;
    
    	public ObjectSet<ObservationComplianceAuthorisation> ObservationComplianceAuthorisations
    	{
    		get { return _observationComplianceAuthorisations  ?? (_observationComplianceAuthorisations = CreateObjectSet<ObservationComplianceAuthorisation>("ObservationComplianceAuthorisations")); }
    	}
    	private ObjectSet<ObservationComplianceAuthorisation> _observationComplianceAuthorisations;
    
    	public ObjectSet<ObservationComplianceCondition> ObservationComplianceConditions
    	{
    		get { return _observationComplianceConditions  ?? (_observationComplianceConditions = CreateObjectSet<ObservationComplianceCondition>("ObservationComplianceConditions")); }
    	}
    	private ObjectSet<ObservationComplianceCondition> _observationComplianceConditions;
    
    	public ObjectSet<AuthorisationComplianceCondition> AuthorisationComplianceConditions
    	{
    		get { return _authorisationComplianceConditions  ?? (_authorisationComplianceConditions = CreateObjectSet<AuthorisationComplianceCondition>("AuthorisationComplianceConditions")); }
    	}
    	private ObjectSet<AuthorisationComplianceCondition> _authorisationComplianceConditions;
    
    	public ObjectSet<Request> Request
    	{
    		get { return _request  ?? (_request = CreateObjectSet<Request>("Request")); }
    	}
    	private ObjectSet<Request> _request;
    
    	public ObjectSet<ActualEquipmentMaterial> ActualEquipmentMaterials
    	{
    		get { return _actualEquipmentMaterials  ?? (_actualEquipmentMaterials = CreateObjectSet<ActualEquipmentMaterial>("ActualEquipmentMaterials")); }
    	}
    	private ObjectSet<ActualEquipmentMaterial> _actualEquipmentMaterials;
    
    	public ObjectSet<ActualEquipmentMaterialAuthorisation> ActualEquipmentMaterialAuthorisations
    	{
    		get { return _actualEquipmentMaterialAuthorisations  ?? (_actualEquipmentMaterialAuthorisations = CreateObjectSet<ActualEquipmentMaterialAuthorisation>("ActualEquipmentMaterialAuthorisations")); }
    	}
    	private ObjectSet<ActualEquipmentMaterialAuthorisation> _actualEquipmentMaterialAuthorisations;
    
    	public ObjectSet<ActualLabour> ActualLabours
    	{
    		get { return _actualLabours  ?? (_actualLabours = CreateObjectSet<ActualLabour>("ActualLabours")); }
    	}
    	private ObjectSet<ActualLabour> _actualLabours;
    
    	public ObjectSet<ActualLabourAuthorisation> ActualLabourAuthorisations
    	{
    		get { return _actualLabourAuthorisations  ?? (_actualLabourAuthorisations = CreateObjectSet<ActualLabourAuthorisation>("ActualLabourAuthorisations")); }
    	}
    	private ObjectSet<ActualLabourAuthorisation> _actualLabourAuthorisations;
    
    	public ObjectSet<ObservationMngtLine> ObservationMngtLines
    	{
    		get { return _observationMngtLines  ?? (_observationMngtLines = CreateObjectSet<ObservationMngtLine>("ObservationMngtLines")); }
    	}
    	private ObjectSet<ObservationMngtLine> _observationMngtLines;
    
    	public ObjectSet<ObservationMngtLineMonitoring> ObservationMngtLineMonitorings
    	{
    		get { return _observationMngtLineMonitorings  ?? (_observationMngtLineMonitorings = CreateObjectSet<ObservationMngtLineMonitoring>("ObservationMngtLineMonitorings")); }
    	}
    	private ObjectSet<ObservationMngtLineMonitoring> _observationMngtLineMonitorings;
    
    	public ObjectSet<ObservationMngtLineResult> ObservationMngtLineResults
    	{
    		get { return _observationMngtLineResults  ?? (_observationMngtLineResults = CreateObjectSet<ObservationMngtLineResult>("ObservationMngtLineResults")); }
    	}
    	private ObjectSet<ObservationMngtLineResult> _observationMngtLineResults;
    
    	public ObjectSet<ObservationMngtLineResultItem> ObservationMngtLineResultItems
    	{
    		get { return _observationMngtLineResultItems  ?? (_observationMngtLineResultItems = CreateObjectSet<ObservationMngtLineResultItem>("ObservationMngtLineResultItems")); }
    	}
    	private ObjectSet<ObservationMngtLineResultItem> _observationMngtLineResultItems;
    
    	public ObjectSet<ObservationRequestSpeciesCount> ObservationRequestSpeciesCounts
    	{
    		get { return _observationRequestSpeciesCounts  ?? (_observationRequestSpeciesCounts = CreateObjectSet<ObservationRequestSpeciesCount>("ObservationRequestSpeciesCounts")); }
    	}
    	private ObjectSet<ObservationRequestSpeciesCount> _observationRequestSpeciesCounts;
    
    	public ObjectSet<ObservationRequestSpeciesCountItem> ObservationRequestSpeciesCountItems
    	{
    		get { return _observationRequestSpeciesCountItems  ?? (_observationRequestSpeciesCountItems = CreateObjectSet<ObservationRequestSpeciesCountItem>("ObservationRequestSpeciesCountItems")); }
    	}
    	private ObjectSet<ObservationRequestSpeciesCountItem> _observationRequestSpeciesCountItems;
    
    	public ObjectSet<RegimeActivityComplianceCondition> RegimeActivityComplianceConditions
    	{
    		get { return _regimeActivityComplianceConditions  ?? (_regimeActivityComplianceConditions = CreateObjectSet<RegimeActivityComplianceCondition>("RegimeActivityComplianceConditions")); }
    	}
    	private ObjectSet<RegimeActivityComplianceCondition> _regimeActivityComplianceConditions;
    
    	public ObjectSet<RegimeActivityDamFurtherAction> RegimeActivityDamFurtherActions
    	{
    		get { return _regimeActivityDamFurtherActions  ?? (_regimeActivityDamFurtherActions = CreateObjectSet<RegimeActivityDamFurtherAction>("RegimeActivityDamFurtherActions")); }
    	}
    	private ObjectSet<RegimeActivityDamFurtherAction> _regimeActivityDamFurtherActions;
    
    	public ObjectSet<RegimeActivityDamReport> RegimeActivityDamReports
    	{
    		get { return _regimeActivityDamReports  ?? (_regimeActivityDamReports = CreateObjectSet<RegimeActivityDamReport>("RegimeActivityDamReports")); }
    	}
    	private ObjectSet<RegimeActivityDamReport> _regimeActivityDamReports;
    
    	public ObjectSet<RegimeActivity> RegimeActivity
    	{
    		get { return _regimeActivity  ?? (_regimeActivity = CreateObjectSet<RegimeActivity>("RegimeActivity")); }
    	}
    	private ObjectSet<RegimeActivity> _regimeActivity;
    
    	public ObjectSet<SampleResult> SampleResults
    	{
    		get { return _sampleResults  ?? (_sampleResults = CreateObjectSet<SampleResult>("SampleResults")); }
    	}
    	private ObjectSet<SampleResult> _sampleResults;
    
    	public ObjectSet<DamRegister> DamRegisters
    	{
    		get { return _damRegisters  ?? (_damRegisters = CreateObjectSet<DamRegister>("DamRegisters")); }
    	}
    	private ObjectSet<DamRegister> _damRegisters;
    
    	public ObjectSet<RegimeActivitySchedule> RegimeActivitySchedule
    	{
    		get { return _regimeActivitySchedule  ?? (_regimeActivitySchedule = CreateObjectSet<RegimeActivitySchedule>("RegimeActivitySchedule")); }
    	}
    	private ObjectSet<RegimeActivitySchedule> _regimeActivitySchedule;
    
    	public ObjectSet<RegimeActivityMngtSite> RegimeActivityMngtSites
    	{
    		get { return _regimeActivityMngtSites  ?? (_regimeActivityMngtSites = CreateObjectSet<RegimeActivityMngtSite>("RegimeActivityMngtSites")); }
    	}
    	private ObjectSet<RegimeActivityMngtSite> _regimeActivityMngtSites;
    
    	public ObjectSet<RegimeActivityResourceNeeded> RegimeActivityResourceNeededs
    	{
    		get { return _regimeActivityResourceNeededs  ?? (_regimeActivityResourceNeededs = CreateObjectSet<RegimeActivityResourceNeeded>("RegimeActivityResourceNeededs")); }
    	}
    	private ObjectSet<RegimeActivityResourceNeeded> _regimeActivityResourceNeededs;
    
    	public ObjectSet<RegimeActivityComplianceAuthorisation> RegimeActivityComplianceAuthorisations
    	{
    		get { return _regimeActivityComplianceAuthorisations  ?? (_regimeActivityComplianceAuthorisations = CreateObjectSet<RegimeActivityComplianceAuthorisation>("RegimeActivityComplianceAuthorisations")); }
    	}
    	private ObjectSet<RegimeActivityComplianceAuthorisation> _regimeActivityComplianceAuthorisations;
    
    	public ObjectSet<EstimationLabour> EstimationLabours
    	{
    		get { return _estimationLabours  ?? (_estimationLabours = CreateObjectSet<EstimationLabour>("EstimationLabours")); }
    	}
    	private ObjectSet<EstimationLabour> _estimationLabours;
    
    	public ObjectSet<EstimationLabourAuthorisation> EstimationLabourAuthorisations
    	{
    		get { return _estimationLabourAuthorisations  ?? (_estimationLabourAuthorisations = CreateObjectSet<EstimationLabourAuthorisation>("EstimationLabourAuthorisations")); }
    	}
    	private ObjectSet<EstimationLabourAuthorisation> _estimationLabourAuthorisations;
    
    	public ObjectSet<EquipmentMaterial> EquipmentMaterials
    	{
    		get { return _equipmentMaterials  ?? (_equipmentMaterials = CreateObjectSet<EquipmentMaterial>("EquipmentMaterials")); }
    	}
    	private ObjectSet<EquipmentMaterial> _equipmentMaterials;
    
    	public ObjectSet<EquipmentMaterialAuthorisation> EquipmentMaterialAuthorisations
    	{
    		get { return _equipmentMaterialAuthorisations  ?? (_equipmentMaterialAuthorisations = CreateObjectSet<EquipmentMaterialAuthorisation>("EquipmentMaterialAuthorisations")); }
    	}
    	private ObjectSet<EquipmentMaterialAuthorisation> _equipmentMaterialAuthorisations;
    
    	public ObjectSet<ReferenceDataValueRate> ReferenceDataValueRates
    	{
    		get { return _referenceDataValueRates  ?? (_referenceDataValueRates = CreateObjectSet<ReferenceDataValueRate>("ReferenceDataValueRates")); }
    	}
    	private ObjectSet<ReferenceDataValueRate> _referenceDataValueRates;
    
    	public ObjectSet<Programme> Programme
    	{
    		get { return _programme  ?? (_programme = CreateObjectSet<Programme>("Programme")); }
    	}
    	private ObjectSet<Programme> _programme;
    
    	public ObjectSet<Regime> Regime
    	{
    		get { return _regime  ?? (_regime = CreateObjectSet<Regime>("Regime")); }
    	}
    	private ObjectSet<Regime> _regime;
    
    	public ObjectSet<RegimeEnvironmentPlan> RegimeEnvironmentPlan
    	{
    		get { return _regimeEnvironmentPlan  ?? (_regimeEnvironmentPlan = CreateObjectSet<RegimeEnvironmentPlan>("RegimeEnvironmentPlan")); }
    	}
    	private ObjectSet<RegimeEnvironmentPlan> _regimeEnvironmentPlan;
    
    	public ObjectSet<RegimeMngtPlan> RegimeMngtPlans
    	{
    		get { return _regimeMngtPlans  ?? (_regimeMngtPlans = CreateObjectSet<RegimeMngtPlan>("RegimeMngtPlans")); }
    	}
    	private ObjectSet<RegimeMngtPlan> _regimeMngtPlans;
    
    	public ObjectSet<Remediation> Remediations
    	{
    		get { return _remediations  ?? (_remediations = CreateObjectSet<Remediation>("Remediations")); }
    	}
    	private ObjectSet<Remediation> _remediations;
    
    	public ObjectSet<RemediationPlantingSpecies> RemediationPlantingSpecies
    	{
    		get { return _remediationPlantingSpecies  ?? (_remediationPlantingSpecies = CreateObjectSet<RemediationPlantingSpecies>("RemediationPlantingSpecies")); }
    	}
    	private ObjectSet<RemediationPlantingSpecies> _remediationPlantingSpecies;
    
    	public ObjectSet<RemediationShootingPest> RemediationShootingPests
    	{
    		get { return _remediationShootingPests  ?? (_remediationShootingPests = CreateObjectSet<RemediationShootingPest>("RemediationShootingPests")); }
    	}
    	private ObjectSet<RemediationShootingPest> _remediationShootingPests;
    
    	public ObjectSet<RemediationTrappingPest> RemediationTrappingPests
    	{
    		get { return _remediationTrappingPests  ?? (_remediationTrappingPests = CreateObjectSet<RemediationTrappingPest>("RemediationTrappingPests")); }
    	}
    	private ObjectSet<RemediationTrappingPest> _remediationTrappingPests;
    
    	public ObjectSet<RemediationSitePlan> RemediationSitePlans
    	{
    		get { return _remediationSitePlans  ?? (_remediationSitePlans = CreateObjectSet<RemediationSitePlan>("RemediationSitePlans")); }
    	}
    	private ObjectSet<RemediationSitePlan> _remediationSitePlans;
    
    	public ObjectSet<RemediationItem> RemediationItems
    	{
    		get { return _remediationItems  ?? (_remediationItems = CreateObjectSet<RemediationItem>("RemediationItems")); }
    	}
    	private ObjectSet<RemediationItem> _remediationItems;
    
    	public ObjectSet<RemediationTreatment> RemediationTreatments
    	{
    		get { return _remediationTreatments  ?? (_remediationTreatments = CreateObjectSet<RemediationTreatment>("RemediationTreatments")); }
    	}
    	private ObjectSet<RemediationTreatment> _remediationTreatments;
    
    	public ObjectSet<PropertyDataDVRUpload> PropertyDataDVRUploads
    	{
    		get { return _propertyDataDVRUploads  ?? (_propertyDataDVRUploads = CreateObjectSet<PropertyDataDVRUpload>("PropertyDataDVRUploads")); }
    	}
    	private ObjectSet<PropertyDataDVRUpload> _propertyDataDVRUploads;
    
    	public ObjectSet<PropertyDataImportMessage> PropertyDataImportMessages
    	{
    		get { return _propertyDataImportMessages  ?? (_propertyDataImportMessages = CreateObjectSet<PropertyDataImportMessage>("PropertyDataImportMessages")); }
    	}
    	private ObjectSet<PropertyDataImportMessage> _propertyDataImportMessages;
    
    	public ObjectSet<PropertyDataValuation> PropertyDataValuations
    	{
    		get { return _propertyDataValuations  ?? (_propertyDataValuations = CreateObjectSet<PropertyDataValuation>("PropertyDataValuations")); }
    	}
    	private ObjectSet<PropertyDataValuation> _propertyDataValuations;
    
    	public ObjectSet<PropertyDataOwner> PropertyDataOwners
    	{
    		get { return _propertyDataOwners  ?? (_propertyDataOwners = CreateObjectSet<PropertyDataOwner>("PropertyDataOwners")); }
    	}
    	private ObjectSet<PropertyDataOwner> _propertyDataOwners;
    
    	public ObjectSet<PropertyDataRatepayer> PropertyDataRatepayers
    	{
    		get { return _propertyDataRatepayers  ?? (_propertyDataRatepayers = CreateObjectSet<PropertyDataRatepayer>("PropertyDataRatepayers")); }
    	}
    	private ObjectSet<PropertyDataRatepayer> _propertyDataRatepayers;
    
    	public ObjectSet<GeneralRegister> GeneralRegisters
    	{
    		get { return _generalRegisters  ?? (_generalRegisters = CreateObjectSet<GeneralRegister>("GeneralRegisters")); }
    	}
    	private ObjectSet<GeneralRegister> _generalRegisters;
    
    	public ObjectSet<ContactQuery> ContactQueries
    	{
    		get { return _contactQueries  ?? (_contactQueries = CreateObjectSet<ContactQuery>("ContactQueries")); }
    	}
    	private ObjectSet<ContactQuery> _contactQueries;
    
    	public ObjectSet<DocumentTemplate> DocumentTemplates
    	{
    		get { return _documentTemplates  ?? (_documentTemplates = CreateObjectSet<DocumentTemplate>("DocumentTemplates")); }
    	}
    	private ObjectSet<DocumentTemplate> _documentTemplates;
    
    	public ObjectSet<Report> Reports
    	{
    		get { return _reports  ?? (_reports = CreateObjectSet<Report>("Reports")); }
    	}
    	private ObjectSet<Report> _reports;
    
    	public ObjectSet<DirectDocumentReferenceCriteria> DirectDocumentReferenceCriterias
    	{
    		get { return _directDocumentReferenceCriterias  ?? (_directDocumentReferenceCriterias = CreateObjectSet<DirectDocumentReferenceCriteria>("DirectDocumentReferenceCriterias")); }
    	}
    	private ObjectSet<DirectDocumentReferenceCriteria> _directDocumentReferenceCriterias;
    
    	public ObjectSet<MobileDocumentReferenceCriteria> MobileDocumentReferenceCriterias
    	{
    		get { return _mobileDocumentReferenceCriterias  ?? (_mobileDocumentReferenceCriterias = CreateObjectSet<MobileDocumentReferenceCriteria>("MobileDocumentReferenceCriterias")); }
    	}
    	private ObjectSet<MobileDocumentReferenceCriteria> _mobileDocumentReferenceCriterias;
    
    	public ObjectSet<RequestOfficerResponsible> RequestOfficerResponsible
    	{
    		get { return _requestOfficerResponsible  ?? (_requestOfficerResponsible = CreateObjectSet<RequestOfficerResponsible>("RequestOfficerResponsible")); }
    	}
    	private ObjectSet<RequestOfficerResponsible> _requestOfficerResponsible;
    
    	public ObjectSet<RequestSubjectTransportRoutes> RequestSubjectTransportRoutes
    	{
    		get { return _requestSubjectTransportRoutes  ?? (_requestSubjectTransportRoutes = CreateObjectSet<RequestSubjectTransportRoutes>("RequestSubjectTransportRoutes")); }
    	}
    	private ObjectSet<RequestSubjectTransportRoutes> _requestSubjectTransportRoutes;
    
    	public ObjectSet<RequestTypeIncidentBreaches> RequestTypeIncidentBreaches
    	{
    		get { return _requestTypeIncidentBreaches  ?? (_requestTypeIncidentBreaches = CreateObjectSet<RequestTypeIncidentBreaches>("RequestTypeIncidentBreaches")); }
    	}
    	private ObjectSet<RequestTypeIncidentBreaches> _requestTypeIncidentBreaches;
    
    	public ObjectSet<RequestTypeIncidentCauseEffect> RequestTypeIncidentCauseEffect
    	{
    		get { return _requestTypeIncidentCauseEffect  ?? (_requestTypeIncidentCauseEffect = CreateObjectSet<RequestTypeIncidentCauseEffect>("RequestTypeIncidentCauseEffect")); }
    	}
    	private ObjectSet<RequestTypeIncidentCauseEffect> _requestTypeIncidentCauseEffect;
    
    	public ObjectSet<RequestTypeIncidentFurtherAction> RequestTypeIncidentFurtherAction
    	{
    		get { return _requestTypeIncidentFurtherAction  ?? (_requestTypeIncidentFurtherAction = CreateObjectSet<RequestTypeIncidentFurtherAction>("RequestTypeIncidentFurtherAction")); }
    	}
    	private ObjectSet<RequestTypeIncidentFurtherAction> _requestTypeIncidentFurtherAction;
    
    	public ObjectSet<RequestTypeIncidentResourceType> RequestTypeIncidentResourceType
    	{
    		get { return _requestTypeIncidentResourceType  ?? (_requestTypeIncidentResourceType = CreateObjectSet<RequestTypeIncidentResourceType>("RequestTypeIncidentResourceType")); }
    	}
    	private ObjectSet<RequestTypeIncidentResourceType> _requestTypeIncidentResourceType;
    
    	public ObjectSet<RequestSubjectBiosecuritySpecies> RequestSubjectBiosecuritySpecies
    	{
    		get { return _requestSubjectBiosecuritySpecies  ?? (_requestSubjectBiosecuritySpecies = CreateObjectSet<RequestSubjectBiosecuritySpecies>("RequestSubjectBiosecuritySpecies")); }
    	}
    	private ObjectSet<RequestSubjectBiosecuritySpecies> _requestSubjectBiosecuritySpecies;
    
    	public ObjectSet<RequestPlan> RequestPlan
    	{
    		get { return _requestPlan  ?? (_requestPlan = CreateObjectSet<RequestPlan>("RequestPlan")); }
    	}
    	private ObjectSet<RequestPlan> _requestPlan;
    
    	public ObjectSet<RequestTypeRFS> RequestTypeRFS
    	{
    		get { return _requestTypeRFS  ?? (_requestTypeRFS = CreateObjectSet<RequestTypeRFS>("RequestTypeRFS")); }
    	}
    	private ObjectSet<RequestTypeRFS> _requestTypeRFS;
    
    	public ObjectSet<RequestTypeIncident> RequestTypeIncident
    	{
    		get { return _requestTypeIncident  ?? (_requestTypeIncident = CreateObjectSet<RequestTypeIncident>("RequestTypeIncident")); }
    	}
    	private ObjectSet<RequestTypeIncident> _requestTypeIncident;
    
    	public ObjectSet<SelectedLandUseSiteClassification> SelectedLandUseSiteClassifications
    	{
    		get { return _selectedLandUseSiteClassifications  ?? (_selectedLandUseSiteClassifications = CreateObjectSet<SelectedLandUseSiteClassification>("SelectedLandUseSiteClassifications")); }
    	}
    	private ObjectSet<SelectedLandUseSiteClassification> _selectedLandUseSiteClassifications;
    
    	public ObjectSet<SelectedLandUseSiteContaminant> SelectedLandUseSiteContaminants
    	{
    		get { return _selectedLandUseSiteContaminants  ?? (_selectedLandUseSiteContaminants = CreateObjectSet<SelectedLandUseSiteContaminant>("SelectedLandUseSiteContaminants")); }
    	}
    	private ObjectSet<SelectedLandUseSiteContaminant> _selectedLandUseSiteContaminants;
    
    	public ObjectSet<SelectedLandUseSiteHAIL> SelectedLandUseSiteHAILs
    	{
    		get { return _selectedLandUseSiteHAILs  ?? (_selectedLandUseSiteHAILs = CreateObjectSet<SelectedLandUseSiteHAIL>("SelectedLandUseSiteHAILs")); }
    	}
    	private ObjectSet<SelectedLandUseSiteHAIL> _selectedLandUseSiteHAILs;
    
    	public ObjectSet<SelectedLandUseSiteRapidRiskScreening> SelectedLandUseSiteRapidRiskScreenings
    	{
    		get { return _selectedLandUseSiteRapidRiskScreenings  ?? (_selectedLandUseSiteRapidRiskScreenings = CreateObjectSet<SelectedLandUseSiteRapidRiskScreening>("SelectedLandUseSiteRapidRiskScreenings")); }
    	}
    	private ObjectSet<SelectedLandUseSiteRapidRiskScreening> _selectedLandUseSiteRapidRiskScreenings;
    
    	public ObjectSet<SelectedLandUseSiteTankPull> SelectedLandUseSiteTankPulls
    	{
    		get { return _selectedLandUseSiteTankPulls  ?? (_selectedLandUseSiteTankPulls = CreateObjectSet<SelectedLandUseSiteTankPull>("SelectedLandUseSiteTankPulls")); }
    	}
    	private ObjectSet<SelectedLandUseSiteTankPull> _selectedLandUseSiteTankPulls;
    
    	public ObjectSet<SelectedLandUseSite> SelectedLandUseSites
    	{
    		get { return _selectedLandUseSites  ?? (_selectedLandUseSites = CreateObjectSet<SelectedLandUseSite>("SelectedLandUseSites")); }
    	}
    	private ObjectSet<SelectedLandUseSite> _selectedLandUseSites;

        #endregion

        #region Function Imports
    	public void AddSpatialResult(Nullable<long> searchHeaderID, string spatialIDs)    
    	{
    
    		ObjectParameter searchHeaderIDParameter;
    
    		if (searchHeaderID.HasValue)
    		{
    			searchHeaderIDParameter = new ObjectParameter("SearchHeaderID", searchHeaderID);
    		}
    		else
    		{
    			searchHeaderIDParameter = new ObjectParameter("SearchHeaderID", typeof(long));
    		}
    
    		ObjectParameter spatialIDsParameter;
    
    		if (spatialIDs != null)
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", spatialIDs);
    		}
    		else
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", typeof(string));
    		}
    		base.ExecuteFunction("AddSpatialResult", searchHeaderIDParameter, spatialIDsParameter);
    
    	}
    	public void ReIndexSearchIndexSpatialID(Nullable<long> iRISObjectID)    
    	{
    
    		ObjectParameter iRISObjectIDParameter;
    
    		if (iRISObjectID.HasValue)
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", iRISObjectID);
    		}
    		else
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", typeof(long));
    		}
    		base.ExecuteFunction("ReIndexSearchIndexSpatialID", iRISObjectIDParameter);
    
    	}
    	public void RunSearch(Nullable<long> searchHeaderID)    
    	{
    
    		ObjectParameter searchHeaderIDParameter;
    
    		if (searchHeaderID.HasValue)
    		{
    			searchHeaderIDParameter = new ObjectParameter("SearchHeaderID", searchHeaderID);
    		}
    		else
    		{
    			searchHeaderIDParameter = new ObjectParameter("SearchHeaderID", typeof(long));
    		}
    		base.ExecuteFunction("RunSearch", searchHeaderIDParameter);
    
    	}
    	public ObjectResult<SearchIndex> SelectSearchResultsByPage(Nullable<long> searchHeaderID, string sortExpression, Nullable<int> pageSize, Nullable<int> pageCount, string excludeObjectIDs, ObjectParameter searchCount)    
    	{
    
    		ObjectParameter searchHeaderIDParameter;
    
    		if (searchHeaderID.HasValue)
    		{
    			searchHeaderIDParameter = new ObjectParameter("SearchHeaderID", searchHeaderID);
    		}
    		else
    		{
    			searchHeaderIDParameter = new ObjectParameter("SearchHeaderID", typeof(long));
    		}
    
    		ObjectParameter sortExpressionParameter;
    
    		if (sortExpression != null)
    		{
    			sortExpressionParameter = new ObjectParameter("SortExpression", sortExpression);
    		}
    		else
    		{
    			sortExpressionParameter = new ObjectParameter("SortExpression", typeof(string));
    		}
    
    		ObjectParameter pageSizeParameter;
    
    		if (pageSize.HasValue)
    		{
    			pageSizeParameter = new ObjectParameter("PageSize", pageSize);
    		}
    		else
    		{
    			pageSizeParameter = new ObjectParameter("PageSize", typeof(int));
    		}
    
    		ObjectParameter pageCountParameter;
    
    		if (pageCount.HasValue)
    		{
    			pageCountParameter = new ObjectParameter("PageCount", pageCount);
    		}
    		else
    		{
    			pageCountParameter = new ObjectParameter("PageCount", typeof(int));
    		}
    
    		ObjectParameter excludeObjectIDsParameter;
    
    		if (excludeObjectIDs != null)
    		{
    			excludeObjectIDsParameter = new ObjectParameter("ExcludeObjectIDs", excludeObjectIDs);
    		}
    		else
    		{
    			excludeObjectIDsParameter = new ObjectParameter("ExcludeObjectIDs", typeof(string));
    		}
    		return base.ExecuteFunction<SearchIndex>("SelectSearchResultsByPage", searchHeaderIDParameter, sortExpressionParameter, pageSizeParameter, pageCountParameter, excludeObjectIDsParameter, searchCount);
    
    	}
    	public void AdvancedSearchLocation(Nullable<long> scopeObjectTypeID, Nullable<long> userID, Nullable<bool> isSpatialSearch, string spatialIDs, string commonName, string description, string featureTypeIDs, Nullable<System.DateTime> createdFrom, Nullable<System.DateTime> createdTo, Nullable<bool> restricted, string restrictedComments, string legalDescription, Nullable<long> locationGroupIRISObjectID, string basicSearchKeywords, string contactOrganisationPersonName, string linkedContactRelationshipTypeIDs, string cdfCriteria, ObjectParameter errorCode, ObjectParameter searchHeaderID)    
    	{
    
    		ObjectParameter scopeObjectTypeIDParameter;
    
    		if (scopeObjectTypeID.HasValue)
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", scopeObjectTypeID);
    		}
    		else
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", typeof(long));
    		}
    
    		ObjectParameter userIDParameter;
    
    		if (userID.HasValue)
    		{
    			userIDParameter = new ObjectParameter("UserID", userID);
    		}
    		else
    		{
    			userIDParameter = new ObjectParameter("UserID", typeof(long));
    		}
    
    		ObjectParameter isSpatialSearchParameter;
    
    		if (isSpatialSearch.HasValue)
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", isSpatialSearch);
    		}
    		else
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", typeof(bool));
    		}
    
    		ObjectParameter spatialIDsParameter;
    
    		if (spatialIDs != null)
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", spatialIDs);
    		}
    		else
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", typeof(string));
    		}
    
    		ObjectParameter commonNameParameter;
    
    		if (commonName != null)
    		{
    			commonNameParameter = new ObjectParameter("CommonName", commonName);
    		}
    		else
    		{
    			commonNameParameter = new ObjectParameter("CommonName", typeof(string));
    		}
    
    		ObjectParameter descriptionParameter;
    
    		if (description != null)
    		{
    			descriptionParameter = new ObjectParameter("Description", description);
    		}
    		else
    		{
    			descriptionParameter = new ObjectParameter("Description", typeof(string));
    		}
    
    		ObjectParameter featureTypeIDsParameter;
    
    		if (featureTypeIDs != null)
    		{
    			featureTypeIDsParameter = new ObjectParameter("FeatureTypeIDs", featureTypeIDs);
    		}
    		else
    		{
    			featureTypeIDsParameter = new ObjectParameter("FeatureTypeIDs", typeof(string));
    		}
    
    		ObjectParameter createdFromParameter;
    
    		if (createdFrom.HasValue)
    		{
    			createdFromParameter = new ObjectParameter("CreatedFrom", createdFrom);
    		}
    		else
    		{
    			createdFromParameter = new ObjectParameter("CreatedFrom", typeof(System.DateTime));
    		}
    
    		ObjectParameter createdToParameter;
    
    		if (createdTo.HasValue)
    		{
    			createdToParameter = new ObjectParameter("CreatedTo", createdTo);
    		}
    		else
    		{
    			createdToParameter = new ObjectParameter("CreatedTo", typeof(System.DateTime));
    		}
    
    		ObjectParameter restrictedParameter;
    
    		if (restricted.HasValue)
    		{
    			restrictedParameter = new ObjectParameter("Restricted", restricted);
    		}
    		else
    		{
    			restrictedParameter = new ObjectParameter("Restricted", typeof(bool));
    		}
    
    		ObjectParameter restrictedCommentsParameter;
    
    		if (restrictedComments != null)
    		{
    			restrictedCommentsParameter = new ObjectParameter("RestrictedComments", restrictedComments);
    		}
    		else
    		{
    			restrictedCommentsParameter = new ObjectParameter("RestrictedComments", typeof(string));
    		}
    
    		ObjectParameter legalDescriptionParameter;
    
    		if (legalDescription != null)
    		{
    			legalDescriptionParameter = new ObjectParameter("LegalDescription", legalDescription);
    		}
    		else
    		{
    			legalDescriptionParameter = new ObjectParameter("LegalDescription", typeof(string));
    		}
    
    		ObjectParameter locationGroupIRISObjectIDParameter;
    
    		if (locationGroupIRISObjectID.HasValue)
    		{
    			locationGroupIRISObjectIDParameter = new ObjectParameter("LocationGroupIRISObjectID", locationGroupIRISObjectID);
    		}
    		else
    		{
    			locationGroupIRISObjectIDParameter = new ObjectParameter("LocationGroupIRISObjectID", typeof(long));
    		}
    
    		ObjectParameter basicSearchKeywordsParameter;
    
    		if (basicSearchKeywords != null)
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", basicSearchKeywords);
    		}
    		else
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", typeof(string));
    		}
    
    		ObjectParameter contactOrganisationPersonNameParameter;
    
    		if (contactOrganisationPersonName != null)
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", contactOrganisationPersonName);
    		}
    		else
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", typeof(string));
    		}
    
    		ObjectParameter linkedContactRelationshipTypeIDsParameter;
    
    		if (linkedContactRelationshipTypeIDs != null)
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", linkedContactRelationshipTypeIDs);
    		}
    		else
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", typeof(string));
    		}
    
    		ObjectParameter cdfCriteriaParameter;
    
    		if (cdfCriteria != null)
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", cdfCriteria);
    		}
    		else
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", typeof(string));
    		}
    		base.ExecuteFunction("AdvancedSearchLocation", scopeObjectTypeIDParameter, userIDParameter, isSpatialSearchParameter, spatialIDsParameter, commonNameParameter, descriptionParameter, featureTypeIDsParameter, createdFromParameter, createdToParameter, restrictedParameter, restrictedCommentsParameter, legalDescriptionParameter, locationGroupIRISObjectIDParameter, basicSearchKeywordsParameter, contactOrganisationPersonNameParameter, linkedContactRelationshipTypeIDsParameter, cdfCriteriaParameter, errorCode, searchHeaderID);
    
    	}
    	public void ReIndexObject(Nullable<long> objectID, string objectType, Nullable<System.DateTime> onlyRefreshIndexOlderThan)    
    	{
    
    		ObjectParameter objectIDParameter;
    
    		if (objectID.HasValue)
    		{
    			objectIDParameter = new ObjectParameter("objectID", objectID);
    		}
    		else
    		{
    			objectIDParameter = new ObjectParameter("objectID", typeof(long));
    		}
    
    		ObjectParameter objectTypeParameter;
    
    		if (objectType != null)
    		{
    			objectTypeParameter = new ObjectParameter("objectType", objectType);
    		}
    		else
    		{
    			objectTypeParameter = new ObjectParameter("objectType", typeof(string));
    		}
    
    		ObjectParameter onlyRefreshIndexOlderThanParameter;
    
    		if (onlyRefreshIndexOlderThan.HasValue)
    		{
    			onlyRefreshIndexOlderThanParameter = new ObjectParameter("OnlyRefreshIndexOlderThan", onlyRefreshIndexOlderThan);
    		}
    		else
    		{
    			onlyRefreshIndexOlderThanParameter = new ObjectParameter("OnlyRefreshIndexOlderThan", typeof(System.DateTime));
    		}
    		base.ExecuteFunction("ReIndexObject", objectIDParameter, objectTypeParameter, onlyRefreshIndexOlderThanParameter);
    
    	}
    	public void CalculateElapsedWorkingDays(Nullable<long> iRISObjectID, ObjectParameter elapsedWorkingDays)    
    	{
    
    		ObjectParameter iRISObjectIDParameter;
    
    		if (iRISObjectID.HasValue)
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", iRISObjectID);
    		}
    		else
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", typeof(long));
    		}
    		base.ExecuteFunction("CalculateElapsedWorkingDays", iRISObjectIDParameter, elapsedWorkingDays);
    
    	}
    	public void CalculateDueDate(Nullable<long> iRISObjectID, ObjectParameter dueDate)    
    	{
    
    		ObjectParameter iRISObjectIDParameter;
    
    		if (iRISObjectID.HasValue)
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", iRISObjectID);
    		}
    		else
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", typeof(long));
    		}
    		base.ExecuteFunction("CalculateDueDate", iRISObjectIDParameter, dueDate);
    
    	}
    	public void CalculateMilestoneAndMilestoneDate(Nullable<long> applicationID, ObjectParameter milestone, ObjectParameter milestoneDate)    
    	{
    
    		ObjectParameter applicationIDParameter;
    
    		if (applicationID.HasValue)
    		{
    			applicationIDParameter = new ObjectParameter("ApplicationID", applicationID);
    		}
    		else
    		{
    			applicationIDParameter = new ObjectParameter("ApplicationID", typeof(long));
    		}
    		base.ExecuteFunction("CalculateMilestoneAndMilestoneDate", applicationIDParameter, milestone, milestoneDate);
    
    	}
    	public void AdvancedSearchApplication(Nullable<long> scopeObjectTypeID, Nullable<long> userID, Nullable<bool> isSpatialSearch, string spatialIDs, Nullable<long> applicationTypeID, Nullable<long> applicationPurposeID, string activityTypeIDs, string activitySubTypeIDs, string applicationStatusIDs, Nullable<System.DateTime> lodgedFrom, Nullable<System.DateTime> lodgedTo, Nullable<long> officerResponsible, string description, string basicSearchKeywords, string contactOrganisationPersonName, string linkedContactRelationshipTypeIDs, string cdfCriteria, ObjectParameter errorCode, ObjectParameter searchHeaderID)    
    	{
    
    		ObjectParameter scopeObjectTypeIDParameter;
    
    		if (scopeObjectTypeID.HasValue)
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", scopeObjectTypeID);
    		}
    		else
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", typeof(long));
    		}
    
    		ObjectParameter userIDParameter;
    
    		if (userID.HasValue)
    		{
    			userIDParameter = new ObjectParameter("UserID", userID);
    		}
    		else
    		{
    			userIDParameter = new ObjectParameter("UserID", typeof(long));
    		}
    
    		ObjectParameter isSpatialSearchParameter;
    
    		if (isSpatialSearch.HasValue)
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", isSpatialSearch);
    		}
    		else
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", typeof(bool));
    		}
    
    		ObjectParameter spatialIDsParameter;
    
    		if (spatialIDs != null)
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", spatialIDs);
    		}
    		else
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", typeof(string));
    		}
    
    		ObjectParameter applicationTypeIDParameter;
    
    		if (applicationTypeID.HasValue)
    		{
    			applicationTypeIDParameter = new ObjectParameter("ApplicationTypeID", applicationTypeID);
    		}
    		else
    		{
    			applicationTypeIDParameter = new ObjectParameter("ApplicationTypeID", typeof(long));
    		}
    
    		ObjectParameter applicationPurposeIDParameter;
    
    		if (applicationPurposeID.HasValue)
    		{
    			applicationPurposeIDParameter = new ObjectParameter("ApplicationPurposeID", applicationPurposeID);
    		}
    		else
    		{
    			applicationPurposeIDParameter = new ObjectParameter("ApplicationPurposeID", typeof(long));
    		}
    
    		ObjectParameter activityTypeIDsParameter;
    
    		if (activityTypeIDs != null)
    		{
    			activityTypeIDsParameter = new ObjectParameter("ActivityTypeIDs", activityTypeIDs);
    		}
    		else
    		{
    			activityTypeIDsParameter = new ObjectParameter("ActivityTypeIDs", typeof(string));
    		}
    
    		ObjectParameter activitySubTypeIDsParameter;
    
    		if (activitySubTypeIDs != null)
    		{
    			activitySubTypeIDsParameter = new ObjectParameter("ActivitySubTypeIDs", activitySubTypeIDs);
    		}
    		else
    		{
    			activitySubTypeIDsParameter = new ObjectParameter("ActivitySubTypeIDs", typeof(string));
    		}
    
    		ObjectParameter applicationStatusIDsParameter;
    
    		if (applicationStatusIDs != null)
    		{
    			applicationStatusIDsParameter = new ObjectParameter("ApplicationStatusIDs", applicationStatusIDs);
    		}
    		else
    		{
    			applicationStatusIDsParameter = new ObjectParameter("ApplicationStatusIDs", typeof(string));
    		}
    
    		ObjectParameter lodgedFromParameter;
    
    		if (lodgedFrom.HasValue)
    		{
    			lodgedFromParameter = new ObjectParameter("LodgedFrom", lodgedFrom);
    		}
    		else
    		{
    			lodgedFromParameter = new ObjectParameter("LodgedFrom", typeof(System.DateTime));
    		}
    
    		ObjectParameter lodgedToParameter;
    
    		if (lodgedTo.HasValue)
    		{
    			lodgedToParameter = new ObjectParameter("LodgedTo", lodgedTo);
    		}
    		else
    		{
    			lodgedToParameter = new ObjectParameter("LodgedTo", typeof(System.DateTime));
    		}
    
    		ObjectParameter officerResponsibleParameter;
    
    		if (officerResponsible.HasValue)
    		{
    			officerResponsibleParameter = new ObjectParameter("OfficerResponsible", officerResponsible);
    		}
    		else
    		{
    			officerResponsibleParameter = new ObjectParameter("OfficerResponsible", typeof(long));
    		}
    
    		ObjectParameter descriptionParameter;
    
    		if (description != null)
    		{
    			descriptionParameter = new ObjectParameter("Description", description);
    		}
    		else
    		{
    			descriptionParameter = new ObjectParameter("Description", typeof(string));
    		}
    
    		ObjectParameter basicSearchKeywordsParameter;
    
    		if (basicSearchKeywords != null)
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", basicSearchKeywords);
    		}
    		else
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", typeof(string));
    		}
    
    		ObjectParameter contactOrganisationPersonNameParameter;
    
    		if (contactOrganisationPersonName != null)
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", contactOrganisationPersonName);
    		}
    		else
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", typeof(string));
    		}
    
    		ObjectParameter linkedContactRelationshipTypeIDsParameter;
    
    		if (linkedContactRelationshipTypeIDs != null)
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", linkedContactRelationshipTypeIDs);
    		}
    		else
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", typeof(string));
    		}
    
    		ObjectParameter cdfCriteriaParameter;
    
    		if (cdfCriteria != null)
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", cdfCriteria);
    		}
    		else
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", typeof(string));
    		}
    		base.ExecuteFunction("AdvancedSearchApplication", scopeObjectTypeIDParameter, userIDParameter, isSpatialSearchParameter, spatialIDsParameter, applicationTypeIDParameter, applicationPurposeIDParameter, activityTypeIDsParameter, activitySubTypeIDsParameter, applicationStatusIDsParameter, lodgedFromParameter, lodgedToParameter, officerResponsibleParameter, descriptionParameter, basicSearchKeywordsParameter, contactOrganisationPersonNameParameter, linkedContactRelationshipTypeIDsParameter, cdfCriteriaParameter, errorCode, searchHeaderID);
    
    	}
    	public void PopulateLinkDetails(Nullable<long> iRISObjectID)    
    	{
    
    		ObjectParameter iRISObjectIDParameter;
    
    		if (iRISObjectID.HasValue)
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", iRISObjectID);
    		}
    		else
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", typeof(long));
    		}
    		base.ExecuteFunction("PopulateLinkDetails", iRISObjectIDParameter);
    
    	}
    	public void AdvancedSearchAuthorisation(Nullable<long> scopeObjectTypeID, Nullable<long> userID, Nullable<bool> isSpatialSearch, string spatialIDs, Nullable<long> authorisationTypeID, string activityTypeIDs, string activitySubTypeIDs, string authorisationStatusIDs, Nullable<System.DateTime> commencedFrom, Nullable<System.DateTime> commencedTo, Nullable<long> officerResponsible, string description, string basicSearchKeywords, string contactOrganisationPersonName, string linkedContactRelationshipTypeIDs, string cdfCriteria, ObjectParameter errorCode, ObjectParameter searchHeaderID)    
    	{
    
    		ObjectParameter scopeObjectTypeIDParameter;
    
    		if (scopeObjectTypeID.HasValue)
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", scopeObjectTypeID);
    		}
    		else
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", typeof(long));
    		}
    
    		ObjectParameter userIDParameter;
    
    		if (userID.HasValue)
    		{
    			userIDParameter = new ObjectParameter("UserID", userID);
    		}
    		else
    		{
    			userIDParameter = new ObjectParameter("UserID", typeof(long));
    		}
    
    		ObjectParameter isSpatialSearchParameter;
    
    		if (isSpatialSearch.HasValue)
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", isSpatialSearch);
    		}
    		else
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", typeof(bool));
    		}
    
    		ObjectParameter spatialIDsParameter;
    
    		if (spatialIDs != null)
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", spatialIDs);
    		}
    		else
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", typeof(string));
    		}
    
    		ObjectParameter authorisationTypeIDParameter;
    
    		if (authorisationTypeID.HasValue)
    		{
    			authorisationTypeIDParameter = new ObjectParameter("AuthorisationTypeID", authorisationTypeID);
    		}
    		else
    		{
    			authorisationTypeIDParameter = new ObjectParameter("AuthorisationTypeID", typeof(long));
    		}
    
    		ObjectParameter activityTypeIDsParameter;
    
    		if (activityTypeIDs != null)
    		{
    			activityTypeIDsParameter = new ObjectParameter("ActivityTypeIDs", activityTypeIDs);
    		}
    		else
    		{
    			activityTypeIDsParameter = new ObjectParameter("ActivityTypeIDs", typeof(string));
    		}
    
    		ObjectParameter activitySubTypeIDsParameter;
    
    		if (activitySubTypeIDs != null)
    		{
    			activitySubTypeIDsParameter = new ObjectParameter("ActivitySubTypeIDs", activitySubTypeIDs);
    		}
    		else
    		{
    			activitySubTypeIDsParameter = new ObjectParameter("ActivitySubTypeIDs", typeof(string));
    		}
    
    		ObjectParameter authorisationStatusIDsParameter;
    
    		if (authorisationStatusIDs != null)
    		{
    			authorisationStatusIDsParameter = new ObjectParameter("AuthorisationStatusIDs", authorisationStatusIDs);
    		}
    		else
    		{
    			authorisationStatusIDsParameter = new ObjectParameter("AuthorisationStatusIDs", typeof(string));
    		}
    
    		ObjectParameter commencedFromParameter;
    
    		if (commencedFrom.HasValue)
    		{
    			commencedFromParameter = new ObjectParameter("CommencedFrom", commencedFrom);
    		}
    		else
    		{
    			commencedFromParameter = new ObjectParameter("CommencedFrom", typeof(System.DateTime));
    		}
    
    		ObjectParameter commencedToParameter;
    
    		if (commencedTo.HasValue)
    		{
    			commencedToParameter = new ObjectParameter("CommencedTo", commencedTo);
    		}
    		else
    		{
    			commencedToParameter = new ObjectParameter("CommencedTo", typeof(System.DateTime));
    		}
    
    		ObjectParameter officerResponsibleParameter;
    
    		if (officerResponsible.HasValue)
    		{
    			officerResponsibleParameter = new ObjectParameter("OfficerResponsible", officerResponsible);
    		}
    		else
    		{
    			officerResponsibleParameter = new ObjectParameter("OfficerResponsible", typeof(long));
    		}
    
    		ObjectParameter descriptionParameter;
    
    		if (description != null)
    		{
    			descriptionParameter = new ObjectParameter("Description", description);
    		}
    		else
    		{
    			descriptionParameter = new ObjectParameter("Description", typeof(string));
    		}
    
    		ObjectParameter basicSearchKeywordsParameter;
    
    		if (basicSearchKeywords != null)
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", basicSearchKeywords);
    		}
    		else
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", typeof(string));
    		}
    
    		ObjectParameter contactOrganisationPersonNameParameter;
    
    		if (contactOrganisationPersonName != null)
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", contactOrganisationPersonName);
    		}
    		else
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", typeof(string));
    		}
    
    		ObjectParameter linkedContactRelationshipTypeIDsParameter;
    
    		if (linkedContactRelationshipTypeIDs != null)
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", linkedContactRelationshipTypeIDs);
    		}
    		else
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", typeof(string));
    		}
    
    		ObjectParameter cdfCriteriaParameter;
    
    		if (cdfCriteria != null)
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", cdfCriteria);
    		}
    		else
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", typeof(string));
    		}
    		base.ExecuteFunction("AdvancedSearchAuthorisation", scopeObjectTypeIDParameter, userIDParameter, isSpatialSearchParameter, spatialIDsParameter, authorisationTypeIDParameter, activityTypeIDsParameter, activitySubTypeIDsParameter, authorisationStatusIDsParameter, commencedFromParameter, commencedToParameter, officerResponsibleParameter, descriptionParameter, basicSearchKeywordsParameter, contactOrganisationPersonNameParameter, linkedContactRelationshipTypeIDsParameter, cdfCriteriaParameter, errorCode, searchHeaderID);
    
    	}
    	public void CalculateDateUsingCalendar(Nullable<long> iRISObjectID, Nullable<System.DateTime> fromDate, Nullable<int> numDays, Nullable<bool> workingDays, Nullable<bool> ignoreHold, ObjectParameter resultDate)    
    	{
    
    		ObjectParameter iRISObjectIDParameter;
    
    		if (iRISObjectID.HasValue)
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", iRISObjectID);
    		}
    		else
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", typeof(long));
    		}
    
    		ObjectParameter fromDateParameter;
    
    		if (fromDate.HasValue)
    		{
    			fromDateParameter = new ObjectParameter("fromDate", fromDate);
    		}
    		else
    		{
    			fromDateParameter = new ObjectParameter("fromDate", typeof(System.DateTime));
    		}
    
    		ObjectParameter numDaysParameter;
    
    		if (numDays.HasValue)
    		{
    			numDaysParameter = new ObjectParameter("numDays", numDays);
    		}
    		else
    		{
    			numDaysParameter = new ObjectParameter("numDays", typeof(int));
    		}
    
    		ObjectParameter workingDaysParameter;
    
    		if (workingDays.HasValue)
    		{
    			workingDaysParameter = new ObjectParameter("workingDays", workingDays);
    		}
    		else
    		{
    			workingDaysParameter = new ObjectParameter("workingDays", typeof(bool));
    		}
    
    		ObjectParameter ignoreHoldParameter;
    
    		if (ignoreHold.HasValue)
    		{
    			ignoreHoldParameter = new ObjectParameter("ignoreHold", ignoreHold);
    		}
    		else
    		{
    			ignoreHoldParameter = new ObjectParameter("ignoreHold", typeof(bool));
    		}
    		base.ExecuteFunction("CalculateDateUsingCalendar", iRISObjectIDParameter, fromDateParameter, numDaysParameter, workingDaysParameter, ignoreHoldParameter, resultDate);
    
    	}
    	public void CreateSearch(string searchCriteria, Nullable<long> scopeObjectTypeID, Nullable<long> scopeSubClass1ID, Nullable<long> userID, Nullable<bool> isSpatialSearch, ObjectParameter searchHeaderID, ObjectParameter errorCode)    
    	{
    
    		ObjectParameter searchCriteriaParameter;
    
    		if (searchCriteria != null)
    		{
    			searchCriteriaParameter = new ObjectParameter("SearchCriteria", searchCriteria);
    		}
    		else
    		{
    			searchCriteriaParameter = new ObjectParameter("SearchCriteria", typeof(string));
    		}
    
    		ObjectParameter scopeObjectTypeIDParameter;
    
    		if (scopeObjectTypeID.HasValue)
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", scopeObjectTypeID);
    		}
    		else
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", typeof(long));
    		}
    
    		ObjectParameter scopeSubClass1IDParameter;
    
    		if (scopeSubClass1ID.HasValue)
    		{
    			scopeSubClass1IDParameter = new ObjectParameter("ScopeSubClass1ID", scopeSubClass1ID);
    		}
    		else
    		{
    			scopeSubClass1IDParameter = new ObjectParameter("ScopeSubClass1ID", typeof(long));
    		}
    
    		ObjectParameter userIDParameter;
    
    		if (userID.HasValue)
    		{
    			userIDParameter = new ObjectParameter("UserID", userID);
    		}
    		else
    		{
    			userIDParameter = new ObjectParameter("UserID", typeof(long));
    		}
    
    		ObjectParameter isSpatialSearchParameter;
    
    		if (isSpatialSearch.HasValue)
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", isSpatialSearch);
    		}
    		else
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", typeof(bool));
    		}
    		base.ExecuteFunction("CreateSearch", searchCriteriaParameter, scopeObjectTypeIDParameter, scopeSubClass1IDParameter, userIDParameter, isSpatialSearchParameter, searchHeaderID, errorCode);
    
    	}
    	public void PopulateObjectID(Nullable<long> linkID, Nullable<long> iRISObjectID)    
    	{
    
    		ObjectParameter linkIDParameter;
    
    		if (linkID.HasValue)
    		{
    			linkIDParameter = new ObjectParameter("LinkID", linkID);
    		}
    		else
    		{
    			linkIDParameter = new ObjectParameter("LinkID", typeof(long));
    		}
    
    		ObjectParameter iRISObjectIDParameter;
    
    		if (iRISObjectID.HasValue)
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", iRISObjectID);
    		}
    		else
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", typeof(long));
    		}
    		base.ExecuteFunction("PopulateObjectID", linkIDParameter, iRISObjectIDParameter);
    
    	}
    	public void AdvancedSearchRegime(Nullable<long> scopeObjectTypeID, Nullable<long> userID, Nullable<bool> isSpatialSearch, string spatialIDs, string regimeTypeIDs, string classificationIDs, string regimeActivityTypeIDs, string activityName, string officerResponsibleIDs, string description, string regimeStatusIDs, string regimeFinancialYearIDs, string basicSearchKeywords, string contactOrganisationPersonName, string linkedContactRelationshipTypeIDs, string cdfCriteria, ObjectParameter errorCode, ObjectParameter searchHeaderID)    
    	{
    
    		ObjectParameter scopeObjectTypeIDParameter;
    
    		if (scopeObjectTypeID.HasValue)
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", scopeObjectTypeID);
    		}
    		else
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", typeof(long));
    		}
    
    		ObjectParameter userIDParameter;
    
    		if (userID.HasValue)
    		{
    			userIDParameter = new ObjectParameter("UserID", userID);
    		}
    		else
    		{
    			userIDParameter = new ObjectParameter("UserID", typeof(long));
    		}
    
    		ObjectParameter isSpatialSearchParameter;
    
    		if (isSpatialSearch.HasValue)
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", isSpatialSearch);
    		}
    		else
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", typeof(bool));
    		}
    
    		ObjectParameter spatialIDsParameter;
    
    		if (spatialIDs != null)
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", spatialIDs);
    		}
    		else
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", typeof(string));
    		}
    
    		ObjectParameter regimeTypeIDsParameter;
    
    		if (regimeTypeIDs != null)
    		{
    			regimeTypeIDsParameter = new ObjectParameter("RegimeTypeIDs", regimeTypeIDs);
    		}
    		else
    		{
    			regimeTypeIDsParameter = new ObjectParameter("RegimeTypeIDs", typeof(string));
    		}
    
    		ObjectParameter classificationIDsParameter;
    
    		if (classificationIDs != null)
    		{
    			classificationIDsParameter = new ObjectParameter("ClassificationIDs", classificationIDs);
    		}
    		else
    		{
    			classificationIDsParameter = new ObjectParameter("ClassificationIDs", typeof(string));
    		}
    
    		ObjectParameter regimeActivityTypeIDsParameter;
    
    		if (regimeActivityTypeIDs != null)
    		{
    			regimeActivityTypeIDsParameter = new ObjectParameter("RegimeActivityTypeIDs", regimeActivityTypeIDs);
    		}
    		else
    		{
    			regimeActivityTypeIDsParameter = new ObjectParameter("RegimeActivityTypeIDs", typeof(string));
    		}
    
    		ObjectParameter activityNameParameter;
    
    		if (activityName != null)
    		{
    			activityNameParameter = new ObjectParameter("ActivityName", activityName);
    		}
    		else
    		{
    			activityNameParameter = new ObjectParameter("ActivityName", typeof(string));
    		}
    
    		ObjectParameter officerResponsibleIDsParameter;
    
    		if (officerResponsibleIDs != null)
    		{
    			officerResponsibleIDsParameter = new ObjectParameter("OfficerResponsibleIDs", officerResponsibleIDs);
    		}
    		else
    		{
    			officerResponsibleIDsParameter = new ObjectParameter("OfficerResponsibleIDs", typeof(string));
    		}
    
    		ObjectParameter descriptionParameter;
    
    		if (description != null)
    		{
    			descriptionParameter = new ObjectParameter("Description", description);
    		}
    		else
    		{
    			descriptionParameter = new ObjectParameter("Description", typeof(string));
    		}
    
    		ObjectParameter regimeStatusIDsParameter;
    
    		if (regimeStatusIDs != null)
    		{
    			regimeStatusIDsParameter = new ObjectParameter("RegimeStatusIDs", regimeStatusIDs);
    		}
    		else
    		{
    			regimeStatusIDsParameter = new ObjectParameter("RegimeStatusIDs", typeof(string));
    		}
    
    		ObjectParameter regimeFinancialYearIDsParameter;
    
    		if (regimeFinancialYearIDs != null)
    		{
    			regimeFinancialYearIDsParameter = new ObjectParameter("RegimeFinancialYearIDs", regimeFinancialYearIDs);
    		}
    		else
    		{
    			regimeFinancialYearIDsParameter = new ObjectParameter("RegimeFinancialYearIDs", typeof(string));
    		}
    
    		ObjectParameter basicSearchKeywordsParameter;
    
    		if (basicSearchKeywords != null)
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", basicSearchKeywords);
    		}
    		else
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", typeof(string));
    		}
    
    		ObjectParameter contactOrganisationPersonNameParameter;
    
    		if (contactOrganisationPersonName != null)
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", contactOrganisationPersonName);
    		}
    		else
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", typeof(string));
    		}
    
    		ObjectParameter linkedContactRelationshipTypeIDsParameter;
    
    		if (linkedContactRelationshipTypeIDs != null)
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", linkedContactRelationshipTypeIDs);
    		}
    		else
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", typeof(string));
    		}
    
    		ObjectParameter cdfCriteriaParameter;
    
    		if (cdfCriteria != null)
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", cdfCriteria);
    		}
    		else
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", typeof(string));
    		}
    		base.ExecuteFunction("AdvancedSearchRegime", scopeObjectTypeIDParameter, userIDParameter, isSpatialSearchParameter, spatialIDsParameter, regimeTypeIDsParameter, classificationIDsParameter, regimeActivityTypeIDsParameter, activityNameParameter, officerResponsibleIDsParameter, descriptionParameter, regimeStatusIDsParameter, regimeFinancialYearIDsParameter, basicSearchKeywordsParameter, contactOrganisationPersonNameParameter, linkedContactRelationshipTypeIDsParameter, cdfCriteriaParameter, errorCode, searchHeaderID);
    
    	}
    	public void PopulateWeekends(Nullable<long> calendarID, Nullable<System.DateTime> loopDate, Nullable<System.DateTime> endDate, string createdBy)    
    	{
    
    		ObjectParameter calendarIDParameter;
    
    		if (calendarID.HasValue)
    		{
    			calendarIDParameter = new ObjectParameter("CalendarID", calendarID);
    		}
    		else
    		{
    			calendarIDParameter = new ObjectParameter("CalendarID", typeof(long));
    		}
    
    		ObjectParameter loopDateParameter;
    
    		if (loopDate.HasValue)
    		{
    			loopDateParameter = new ObjectParameter("LoopDate", loopDate);
    		}
    		else
    		{
    			loopDateParameter = new ObjectParameter("LoopDate", typeof(System.DateTime));
    		}
    
    		ObjectParameter endDateParameter;
    
    		if (endDate.HasValue)
    		{
    			endDateParameter = new ObjectParameter("EndDate", endDate);
    		}
    		else
    		{
    			endDateParameter = new ObjectParameter("EndDate", typeof(System.DateTime));
    		}
    
    		ObjectParameter createdByParameter;
    
    		if (createdBy != null)
    		{
    			createdByParameter = new ObjectParameter("CreatedBy", createdBy);
    		}
    		else
    		{
    			createdByParameter = new ObjectParameter("CreatedBy", typeof(string));
    		}
    		base.ExecuteFunction("PopulateWeekends", calendarIDParameter, loopDateParameter, endDateParameter, createdByParameter);
    
    	}
    	public void BatchJob_Authorisations_NotYetCommenced()    
    	{
    		base.ExecuteFunction("BatchJob_Authorisations_NotYetCommenced");
    
    	}
    	public ObjectResult<BatchJob_Authorisations_AuthorisationRenewalAdvice_Result> BatchJob_Authorisations_AuthorisationRenewalAdvice()    
    	{
    		return base.ExecuteFunction<BatchJob_Authorisations_AuthorisationRenewalAdvice_Result>("BatchJob_Authorisations_AuthorisationRenewalAdvice");
    
    	}
    	public void BatchJob_Authorisations_AuthorisationExpiry()    
    	{
    		base.ExecuteFunction("BatchJob_Authorisations_AuthorisationExpiry");
    
    	}
    	public void BatchJob_Authorisations_AuthorisationExpiryS124Protection()    
    	{
    		base.ExecuteFunction("BatchJob_Authorisations_AuthorisationExpiryS124Protection");
    
    	}
    	public void GetPreviousTaskCompletionDate(Nullable<System.Guid> currentWorkflowInstanceUID, ObjectParameter previousTaskCompletionDate)    
    	{
    
    		ObjectParameter currentWorkflowInstanceUIDParameter;
    
    		if (currentWorkflowInstanceUID.HasValue)
    		{
    			currentWorkflowInstanceUIDParameter = new ObjectParameter("CurrentWorkflowInstanceUID", currentWorkflowInstanceUID);
    		}
    		else
    		{
    			currentWorkflowInstanceUIDParameter = new ObjectParameter("CurrentWorkflowInstanceUID", typeof(System.Guid));
    		}
    		base.ExecuteFunction("GetPreviousTaskCompletionDate", currentWorkflowInstanceUIDParameter, previousTaskCompletionDate);
    
    	}
    	public void AdvancedSearchProgramme(Nullable<long> scopeObjectTypeID, Nullable<long> userID, Nullable<bool> isSpatialSearch, string spatialIDs, Nullable<System.DateTime> startDateFrom, Nullable<System.DateTime> startDateTo, Nullable<System.DateTime> endDateFrom, Nullable<System.DateTime> endDateTo, string programmeTypeIDs, string priorityIDs, string officerResponsibleIDs, string description, string basicSearchKeywords, string contactOrganisationPersonName, string linkedContactRelationshipTypeIDs, string cdfCriteria, ObjectParameter errorCode, ObjectParameter searchHeaderID)    
    	{
    
    		ObjectParameter scopeObjectTypeIDParameter;
    
    		if (scopeObjectTypeID.HasValue)
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", scopeObjectTypeID);
    		}
    		else
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", typeof(long));
    		}
    
    		ObjectParameter userIDParameter;
    
    		if (userID.HasValue)
    		{
    			userIDParameter = new ObjectParameter("UserID", userID);
    		}
    		else
    		{
    			userIDParameter = new ObjectParameter("UserID", typeof(long));
    		}
    
    		ObjectParameter isSpatialSearchParameter;
    
    		if (isSpatialSearch.HasValue)
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", isSpatialSearch);
    		}
    		else
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", typeof(bool));
    		}
    
    		ObjectParameter spatialIDsParameter;
    
    		if (spatialIDs != null)
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", spatialIDs);
    		}
    		else
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", typeof(string));
    		}
    
    		ObjectParameter startDateFromParameter;
    
    		if (startDateFrom.HasValue)
    		{
    			startDateFromParameter = new ObjectParameter("StartDateFrom", startDateFrom);
    		}
    		else
    		{
    			startDateFromParameter = new ObjectParameter("StartDateFrom", typeof(System.DateTime));
    		}
    
    		ObjectParameter startDateToParameter;
    
    		if (startDateTo.HasValue)
    		{
    			startDateToParameter = new ObjectParameter("StartDateTo", startDateTo);
    		}
    		else
    		{
    			startDateToParameter = new ObjectParameter("StartDateTo", typeof(System.DateTime));
    		}
    
    		ObjectParameter endDateFromParameter;
    
    		if (endDateFrom.HasValue)
    		{
    			endDateFromParameter = new ObjectParameter("EndDateFrom", endDateFrom);
    		}
    		else
    		{
    			endDateFromParameter = new ObjectParameter("EndDateFrom", typeof(System.DateTime));
    		}
    
    		ObjectParameter endDateToParameter;
    
    		if (endDateTo.HasValue)
    		{
    			endDateToParameter = new ObjectParameter("EndDateTo", endDateTo);
    		}
    		else
    		{
    			endDateToParameter = new ObjectParameter("EndDateTo", typeof(System.DateTime));
    		}
    
    		ObjectParameter programmeTypeIDsParameter;
    
    		if (programmeTypeIDs != null)
    		{
    			programmeTypeIDsParameter = new ObjectParameter("ProgrammeTypeIDs", programmeTypeIDs);
    		}
    		else
    		{
    			programmeTypeIDsParameter = new ObjectParameter("ProgrammeTypeIDs", typeof(string));
    		}
    
    		ObjectParameter priorityIDsParameter;
    
    		if (priorityIDs != null)
    		{
    			priorityIDsParameter = new ObjectParameter("PriorityIDs", priorityIDs);
    		}
    		else
    		{
    			priorityIDsParameter = new ObjectParameter("PriorityIDs", typeof(string));
    		}
    
    		ObjectParameter officerResponsibleIDsParameter;
    
    		if (officerResponsibleIDs != null)
    		{
    			officerResponsibleIDsParameter = new ObjectParameter("OfficerResponsibleIDs", officerResponsibleIDs);
    		}
    		else
    		{
    			officerResponsibleIDsParameter = new ObjectParameter("OfficerResponsibleIDs", typeof(string));
    		}
    
    		ObjectParameter descriptionParameter;
    
    		if (description != null)
    		{
    			descriptionParameter = new ObjectParameter("Description", description);
    		}
    		else
    		{
    			descriptionParameter = new ObjectParameter("Description", typeof(string));
    		}
    
    		ObjectParameter basicSearchKeywordsParameter;
    
    		if (basicSearchKeywords != null)
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", basicSearchKeywords);
    		}
    		else
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", typeof(string));
    		}
    
    		ObjectParameter contactOrganisationPersonNameParameter;
    
    		if (contactOrganisationPersonName != null)
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", contactOrganisationPersonName);
    		}
    		else
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", typeof(string));
    		}
    
    		ObjectParameter linkedContactRelationshipTypeIDsParameter;
    
    		if (linkedContactRelationshipTypeIDs != null)
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", linkedContactRelationshipTypeIDs);
    		}
    		else
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", typeof(string));
    		}
    
    		ObjectParameter cdfCriteriaParameter;
    
    		if (cdfCriteria != null)
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", cdfCriteria);
    		}
    		else
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", typeof(string));
    		}
    		base.ExecuteFunction("AdvancedSearchProgramme", scopeObjectTypeIDParameter, userIDParameter, isSpatialSearchParameter, spatialIDsParameter, startDateFromParameter, startDateToParameter, endDateFromParameter, endDateToParameter, programmeTypeIDsParameter, priorityIDsParameter, officerResponsibleIDsParameter, descriptionParameter, basicSearchKeywordsParameter, contactOrganisationPersonNameParameter, linkedContactRelationshipTypeIDsParameter, cdfCriteriaParameter, errorCode, searchHeaderID);
    
    	}
    	public ObjectResult<BatchJob_RegimeActivity_ActivityScheduling_Result> BatchJob_RegimeActivity_ActivityScheduling(Nullable<System.DateTime> day, string regimeTypeCode, Nullable<long> regimeActivityIRISObjectID)    
    	{
    
    		ObjectParameter dayParameter;
    
    		if (day.HasValue)
    		{
    			dayParameter = new ObjectParameter("Day", day);
    		}
    		else
    		{
    			dayParameter = new ObjectParameter("Day", typeof(System.DateTime));
    		}
    
    		ObjectParameter regimeTypeCodeParameter;
    
    		if (regimeTypeCode != null)
    		{
    			regimeTypeCodeParameter = new ObjectParameter("RegimeTypeCode", regimeTypeCode);
    		}
    		else
    		{
    			regimeTypeCodeParameter = new ObjectParameter("RegimeTypeCode", typeof(string));
    		}
    
    		ObjectParameter regimeActivityIRISObjectIDParameter;
    
    		if (regimeActivityIRISObjectID.HasValue)
    		{
    			regimeActivityIRISObjectIDParameter = new ObjectParameter("RegimeActivityIRISObjectID", regimeActivityIRISObjectID);
    		}
    		else
    		{
    			regimeActivityIRISObjectIDParameter = new ObjectParameter("RegimeActivityIRISObjectID", typeof(long));
    		}
    		return base.ExecuteFunction<BatchJob_RegimeActivity_ActivityScheduling_Result>("BatchJob_RegimeActivity_ActivityScheduling", dayParameter, regimeTypeCodeParameter, regimeActivityIRISObjectIDParameter);
    
    	}
    	public void BatchJob_Search_DeleteOldSearchResults()    
    	{
    		base.ExecuteFunction("BatchJob_Search_DeleteOldSearchResults");
    
    	}
    	public void AdvancedSearchRequest(Nullable<long> scopeObjectTypeID, Nullable<long> userID, Nullable<bool> isSpatialSearch, string spatialIDs, string requestTypeIDs, string requestSubjectTypeIDs, string requestSubjectIDs, string requestPriorityIDs, Nullable<long> officerResponsible, string requestOrganisationPersonName, string requestContactRelationshipTypeIDs, string requestDetails, Nullable<System.DateTime> requestDateFrom, Nullable<System.DateTime> requestDateTo, string requestStatusIDs, string basicSearchKeywords, Nullable<long> speciesTypeID, Nullable<long> speciesID, string linkedContactOrganisationPersonName, string linkedContactRelationshipTypeIDs, string cdfCriteria, ObjectParameter errorCode, ObjectParameter searchHeaderID)    
    	{
    
    		ObjectParameter scopeObjectTypeIDParameter;
    
    		if (scopeObjectTypeID.HasValue)
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", scopeObjectTypeID);
    		}
    		else
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", typeof(long));
    		}
    
    		ObjectParameter userIDParameter;
    
    		if (userID.HasValue)
    		{
    			userIDParameter = new ObjectParameter("UserID", userID);
    		}
    		else
    		{
    			userIDParameter = new ObjectParameter("UserID", typeof(long));
    		}
    
    		ObjectParameter isSpatialSearchParameter;
    
    		if (isSpatialSearch.HasValue)
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", isSpatialSearch);
    		}
    		else
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", typeof(bool));
    		}
    
    		ObjectParameter spatialIDsParameter;
    
    		if (spatialIDs != null)
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", spatialIDs);
    		}
    		else
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", typeof(string));
    		}
    
    		ObjectParameter requestTypeIDsParameter;
    
    		if (requestTypeIDs != null)
    		{
    			requestTypeIDsParameter = new ObjectParameter("RequestTypeIDs", requestTypeIDs);
    		}
    		else
    		{
    			requestTypeIDsParameter = new ObjectParameter("RequestTypeIDs", typeof(string));
    		}
    
    		ObjectParameter requestSubjectTypeIDsParameter;
    
    		if (requestSubjectTypeIDs != null)
    		{
    			requestSubjectTypeIDsParameter = new ObjectParameter("RequestSubjectTypeIDs", requestSubjectTypeIDs);
    		}
    		else
    		{
    			requestSubjectTypeIDsParameter = new ObjectParameter("RequestSubjectTypeIDs", typeof(string));
    		}
    
    		ObjectParameter requestSubjectIDsParameter;
    
    		if (requestSubjectIDs != null)
    		{
    			requestSubjectIDsParameter = new ObjectParameter("RequestSubjectIDs", requestSubjectIDs);
    		}
    		else
    		{
    			requestSubjectIDsParameter = new ObjectParameter("RequestSubjectIDs", typeof(string));
    		}
    
    		ObjectParameter requestPriorityIDsParameter;
    
    		if (requestPriorityIDs != null)
    		{
    			requestPriorityIDsParameter = new ObjectParameter("RequestPriorityIDs", requestPriorityIDs);
    		}
    		else
    		{
    			requestPriorityIDsParameter = new ObjectParameter("RequestPriorityIDs", typeof(string));
    		}
    
    		ObjectParameter officerResponsibleParameter;
    
    		if (officerResponsible.HasValue)
    		{
    			officerResponsibleParameter = new ObjectParameter("OfficerResponsible", officerResponsible);
    		}
    		else
    		{
    			officerResponsibleParameter = new ObjectParameter("OfficerResponsible", typeof(long));
    		}
    
    		ObjectParameter requestOrganisationPersonNameParameter;
    
    		if (requestOrganisationPersonName != null)
    		{
    			requestOrganisationPersonNameParameter = new ObjectParameter("RequestOrganisationPersonName", requestOrganisationPersonName);
    		}
    		else
    		{
    			requestOrganisationPersonNameParameter = new ObjectParameter("RequestOrganisationPersonName", typeof(string));
    		}
    
    		ObjectParameter requestContactRelationshipTypeIDsParameter;
    
    		if (requestContactRelationshipTypeIDs != null)
    		{
    			requestContactRelationshipTypeIDsParameter = new ObjectParameter("RequestContactRelationshipTypeIDs", requestContactRelationshipTypeIDs);
    		}
    		else
    		{
    			requestContactRelationshipTypeIDsParameter = new ObjectParameter("RequestContactRelationshipTypeIDs", typeof(string));
    		}
    
    		ObjectParameter requestDetailsParameter;
    
    		if (requestDetails != null)
    		{
    			requestDetailsParameter = new ObjectParameter("RequestDetails", requestDetails);
    		}
    		else
    		{
    			requestDetailsParameter = new ObjectParameter("RequestDetails", typeof(string));
    		}
    
    		ObjectParameter requestDateFromParameter;
    
    		if (requestDateFrom.HasValue)
    		{
    			requestDateFromParameter = new ObjectParameter("RequestDateFrom", requestDateFrom);
    		}
    		else
    		{
    			requestDateFromParameter = new ObjectParameter("RequestDateFrom", typeof(System.DateTime));
    		}
    
    		ObjectParameter requestDateToParameter;
    
    		if (requestDateTo.HasValue)
    		{
    			requestDateToParameter = new ObjectParameter("RequestDateTo", requestDateTo);
    		}
    		else
    		{
    			requestDateToParameter = new ObjectParameter("RequestDateTo", typeof(System.DateTime));
    		}
    
    		ObjectParameter requestStatusIDsParameter;
    
    		if (requestStatusIDs != null)
    		{
    			requestStatusIDsParameter = new ObjectParameter("RequestStatusIDs", requestStatusIDs);
    		}
    		else
    		{
    			requestStatusIDsParameter = new ObjectParameter("RequestStatusIDs", typeof(string));
    		}
    
    		ObjectParameter basicSearchKeywordsParameter;
    
    		if (basicSearchKeywords != null)
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", basicSearchKeywords);
    		}
    		else
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", typeof(string));
    		}
    
    		ObjectParameter speciesTypeIDParameter;
    
    		if (speciesTypeID.HasValue)
    		{
    			speciesTypeIDParameter = new ObjectParameter("SpeciesTypeID", speciesTypeID);
    		}
    		else
    		{
    			speciesTypeIDParameter = new ObjectParameter("SpeciesTypeID", typeof(long));
    		}
    
    		ObjectParameter speciesIDParameter;
    
    		if (speciesID.HasValue)
    		{
    			speciesIDParameter = new ObjectParameter("SpeciesID", speciesID);
    		}
    		else
    		{
    			speciesIDParameter = new ObjectParameter("SpeciesID", typeof(long));
    		}
    
    		ObjectParameter linkedContactOrganisationPersonNameParameter;
    
    		if (linkedContactOrganisationPersonName != null)
    		{
    			linkedContactOrganisationPersonNameParameter = new ObjectParameter("LinkedContactOrganisationPersonName", linkedContactOrganisationPersonName);
    		}
    		else
    		{
    			linkedContactOrganisationPersonNameParameter = new ObjectParameter("LinkedContactOrganisationPersonName", typeof(string));
    		}
    
    		ObjectParameter linkedContactRelationshipTypeIDsParameter;
    
    		if (linkedContactRelationshipTypeIDs != null)
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", linkedContactRelationshipTypeIDs);
    		}
    		else
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", typeof(string));
    		}
    
    		ObjectParameter cdfCriteriaParameter;
    
    		if (cdfCriteria != null)
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", cdfCriteria);
    		}
    		else
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", typeof(string));
    		}
    		base.ExecuteFunction("AdvancedSearchRequest", scopeObjectTypeIDParameter, userIDParameter, isSpatialSearchParameter, spatialIDsParameter, requestTypeIDsParameter, requestSubjectTypeIDsParameter, requestSubjectIDsParameter, requestPriorityIDsParameter, officerResponsibleParameter, requestOrganisationPersonNameParameter, requestContactRelationshipTypeIDsParameter, requestDetailsParameter, requestDateFromParameter, requestDateToParameter, requestStatusIDsParameter, basicSearchKeywordsParameter, speciesTypeIDParameter, speciesIDParameter, linkedContactOrganisationPersonNameParameter, linkedContactRelationshipTypeIDsParameter, cdfCriteriaParameter, errorCode, searchHeaderID);
    
    	}
    	public void Workflow_CopyCallMappings(Nullable<long> sourceWorkflowDefinitionID, Nullable<long> targetWorkflowDefinitionID, Nullable<System.DateTime> startDate, string createdBy, Nullable<System.DateTime> dateCreated)    
    	{
    
    		ObjectParameter sourceWorkflowDefinitionIDParameter;
    
    		if (sourceWorkflowDefinitionID.HasValue)
    		{
    			sourceWorkflowDefinitionIDParameter = new ObjectParameter("sourceWorkflowDefinitionID", sourceWorkflowDefinitionID);
    		}
    		else
    		{
    			sourceWorkflowDefinitionIDParameter = new ObjectParameter("sourceWorkflowDefinitionID", typeof(long));
    		}
    
    		ObjectParameter targetWorkflowDefinitionIDParameter;
    
    		if (targetWorkflowDefinitionID.HasValue)
    		{
    			targetWorkflowDefinitionIDParameter = new ObjectParameter("targetWorkflowDefinitionID", targetWorkflowDefinitionID);
    		}
    		else
    		{
    			targetWorkflowDefinitionIDParameter = new ObjectParameter("targetWorkflowDefinitionID", typeof(long));
    		}
    
    		ObjectParameter startDateParameter;
    
    		if (startDate.HasValue)
    		{
    			startDateParameter = new ObjectParameter("startDate", startDate);
    		}
    		else
    		{
    			startDateParameter = new ObjectParameter("startDate", typeof(System.DateTime));
    		}
    
    		ObjectParameter createdByParameter;
    
    		if (createdBy != null)
    		{
    			createdByParameter = new ObjectParameter("createdBy", createdBy);
    		}
    		else
    		{
    			createdByParameter = new ObjectParameter("createdBy", typeof(string));
    		}
    
    		ObjectParameter dateCreatedParameter;
    
    		if (dateCreated.HasValue)
    		{
    			dateCreatedParameter = new ObjectParameter("dateCreated", dateCreated);
    		}
    		else
    		{
    			dateCreatedParameter = new ObjectParameter("dateCreated", typeof(System.DateTime));
    		}
    		base.ExecuteFunction("Workflow_CopyCallMappings", sourceWorkflowDefinitionIDParameter, targetWorkflowDefinitionIDParameter, startDateParameter, createdByParameter, dateCreatedParameter);
    
    	}
    	public void Workflow_CopyTaskDefinitions(Nullable<long> sourceWorkflowDefinitionID, Nullable<long> targetWorkflowDefinitionID, string modifiedBy, Nullable<System.DateTime> lastModified)    
    	{
    
    		ObjectParameter sourceWorkflowDefinitionIDParameter;
    
    		if (sourceWorkflowDefinitionID.HasValue)
    		{
    			sourceWorkflowDefinitionIDParameter = new ObjectParameter("sourceWorkflowDefinitionID", sourceWorkflowDefinitionID);
    		}
    		else
    		{
    			sourceWorkflowDefinitionIDParameter = new ObjectParameter("sourceWorkflowDefinitionID", typeof(long));
    		}
    
    		ObjectParameter targetWorkflowDefinitionIDParameter;
    
    		if (targetWorkflowDefinitionID.HasValue)
    		{
    			targetWorkflowDefinitionIDParameter = new ObjectParameter("targetWorkflowDefinitionID", targetWorkflowDefinitionID);
    		}
    		else
    		{
    			targetWorkflowDefinitionIDParameter = new ObjectParameter("targetWorkflowDefinitionID", typeof(long));
    		}
    
    		ObjectParameter modifiedByParameter;
    
    		if (modifiedBy != null)
    		{
    			modifiedByParameter = new ObjectParameter("ModifiedBy", modifiedBy);
    		}
    		else
    		{
    			modifiedByParameter = new ObjectParameter("ModifiedBy", typeof(string));
    		}
    
    		ObjectParameter lastModifiedParameter;
    
    		if (lastModified.HasValue)
    		{
    			lastModifiedParameter = new ObjectParameter("LastModified", lastModified);
    		}
    		else
    		{
    			lastModifiedParameter = new ObjectParameter("LastModified", typeof(System.DateTime));
    		}
    		base.ExecuteFunction("Workflow_CopyTaskDefinitions", sourceWorkflowDefinitionIDParameter, targetWorkflowDefinitionIDParameter, modifiedByParameter, lastModifiedParameter);
    
    	}
    	public void PopulateInheritedIRISObjectSecurityContext(Nullable<long> iRISObjectID)    
    	{
    
    		ObjectParameter iRISObjectIDParameter;
    
    		if (iRISObjectID.HasValue)
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", iRISObjectID);
    		}
    		else
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", typeof(long));
    		}
    		base.ExecuteFunction("PopulateInheritedIRISObjectSecurityContext", iRISObjectIDParameter);
    
    	}
    	public ObjectResult<User> ListUsersWithEditAccessToIRISObjects(string iRISObjectIDs, Nullable<bool> onlyIncludeActiveUser, Nullable<bool> ignoreDataSecurity)    
    	{
    
    		ObjectParameter iRISObjectIDsParameter;
    
    		if (iRISObjectIDs != null)
    		{
    			iRISObjectIDsParameter = new ObjectParameter("IRISObjectIDs", iRISObjectIDs);
    		}
    		else
    		{
    			iRISObjectIDsParameter = new ObjectParameter("IRISObjectIDs", typeof(string));
    		}
    
    		ObjectParameter onlyIncludeActiveUserParameter;
    
    		if (onlyIncludeActiveUser.HasValue)
    		{
    			onlyIncludeActiveUserParameter = new ObjectParameter("OnlyIncludeActiveUser", onlyIncludeActiveUser);
    		}
    		else
    		{
    			onlyIncludeActiveUserParameter = new ObjectParameter("OnlyIncludeActiveUser", typeof(bool));
    		}
    
    		ObjectParameter ignoreDataSecurityParameter;
    
    		if (ignoreDataSecurity.HasValue)
    		{
    			ignoreDataSecurityParameter = new ObjectParameter("IgnoreDataSecurity", ignoreDataSecurity);
    		}
    		else
    		{
    			ignoreDataSecurityParameter = new ObjectParameter("IgnoreDataSecurity", typeof(bool));
    		}
    		return base.ExecuteFunction<User>("ListUsersWithEditAccessToIRISObjects", iRISObjectIDsParameter, onlyIncludeActiveUserParameter, ignoreDataSecurityParameter);
    
    	}
    	public ObjectResult<Group> ListGroupsWithEditAccessToIRISObjects(string iRISObjectIDs)    
    	{
    
    		ObjectParameter iRISObjectIDsParameter;
    
    		if (iRISObjectIDs != null)
    		{
    			iRISObjectIDsParameter = new ObjectParameter("IRISObjectIDs", iRISObjectIDs);
    		}
    		else
    		{
    			iRISObjectIDsParameter = new ObjectParameter("IRISObjectIDs", typeof(string));
    		}
    		return base.ExecuteFunction<Group>("ListGroupsWithEditAccessToIRISObjects", iRISObjectIDsParameter);
    
    	}
    	public void HasAssociateGeometry(Nullable<long> iRISObjectID, ObjectParameter hasAssociateGeometry)    
    	{
    
    		ObjectParameter iRISObjectIDParameter;
    
    		if (iRISObjectID.HasValue)
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", iRISObjectID);
    		}
    		else
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", typeof(long));
    		}
    		base.ExecuteFunction("HasAssociateGeometry", iRISObjectIDParameter, hasAssociateGeometry);
    
    	}
    	public ObjectResult<Group> ListGroupsWithEditOrEventAccessToIRISObjects(string iRISObjectIDs)    
    	{
    
    		ObjectParameter iRISObjectIDsParameter;
    
    		if (iRISObjectIDs != null)
    		{
    			iRISObjectIDsParameter = new ObjectParameter("IRISObjectIDs", iRISObjectIDs);
    		}
    		else
    		{
    			iRISObjectIDsParameter = new ObjectParameter("IRISObjectIDs", typeof(string));
    		}
    		return base.ExecuteFunction<Group>("ListGroupsWithEditOrEventAccessToIRISObjects", iRISObjectIDsParameter);
    
    	}
    	public ObjectResult<Nullable<long>> ListTaskInstancesAssignedToUser(Nullable<long> userID, Nullable<long> groupID)    
    	{
    
    		ObjectParameter userIDParameter;
    
    		if (userID.HasValue)
    		{
    			userIDParameter = new ObjectParameter("UserID", userID);
    		}
    		else
    		{
    			userIDParameter = new ObjectParameter("UserID", typeof(long));
    		}
    
    		ObjectParameter groupIDParameter;
    
    		if (groupID.HasValue)
    		{
    			groupIDParameter = new ObjectParameter("GroupID", groupID);
    		}
    		else
    		{
    			groupIDParameter = new ObjectParameter("GroupID", typeof(long));
    		}
    		return base.ExecuteFunction<Nullable<long>>("ListTaskInstancesAssignedToUser", userIDParameter, groupIDParameter);
    
    	}
    	public ObjectResult<User> ListUsersWithEditOrEventAccessToIRISObjects(string iRISObjectIDs, Nullable<bool> onlyIncludeActiveUser, Nullable<bool> ignoreDataSecurity)    
    	{
    
    		ObjectParameter iRISObjectIDsParameter;
    
    		if (iRISObjectIDs != null)
    		{
    			iRISObjectIDsParameter = new ObjectParameter("IRISObjectIDs", iRISObjectIDs);
    		}
    		else
    		{
    			iRISObjectIDsParameter = new ObjectParameter("IRISObjectIDs", typeof(string));
    		}
    
    		ObjectParameter onlyIncludeActiveUserParameter;
    
    		if (onlyIncludeActiveUser.HasValue)
    		{
    			onlyIncludeActiveUserParameter = new ObjectParameter("OnlyIncludeActiveUser", onlyIncludeActiveUser);
    		}
    		else
    		{
    			onlyIncludeActiveUserParameter = new ObjectParameter("OnlyIncludeActiveUser", typeof(bool));
    		}
    
    		ObjectParameter ignoreDataSecurityParameter;
    
    		if (ignoreDataSecurity.HasValue)
    		{
    			ignoreDataSecurityParameter = new ObjectParameter("IgnoreDataSecurity", ignoreDataSecurity);
    		}
    		else
    		{
    			ignoreDataSecurityParameter = new ObjectParameter("IgnoreDataSecurity", typeof(bool));
    		}
    		return base.ExecuteFunction<User>("ListUsersWithEditOrEventAccessToIRISObjects", iRISObjectIDsParameter, onlyIncludeActiveUserParameter, ignoreDataSecurityParameter);
    
    	}
    	public ObjectResult<Nullable<long>> BulkReassignOfficerResponsible(Nullable<long> fromOfficerResponsibleID, Nullable<long> toOfficerResponsibleID, string currentUserAccountName, Nullable<long> userID, Nullable<long> groupID)    
    	{
    
    		ObjectParameter fromOfficerResponsibleIDParameter;
    
    		if (fromOfficerResponsibleID.HasValue)
    		{
    			fromOfficerResponsibleIDParameter = new ObjectParameter("FromOfficerResponsibleID", fromOfficerResponsibleID);
    		}
    		else
    		{
    			fromOfficerResponsibleIDParameter = new ObjectParameter("FromOfficerResponsibleID", typeof(long));
    		}
    
    		ObjectParameter toOfficerResponsibleIDParameter;
    
    		if (toOfficerResponsibleID.HasValue)
    		{
    			toOfficerResponsibleIDParameter = new ObjectParameter("ToOfficerResponsibleID", toOfficerResponsibleID);
    		}
    		else
    		{
    			toOfficerResponsibleIDParameter = new ObjectParameter("ToOfficerResponsibleID", typeof(long));
    		}
    
    		ObjectParameter currentUserAccountNameParameter;
    
    		if (currentUserAccountName != null)
    		{
    			currentUserAccountNameParameter = new ObjectParameter("CurrentUserAccountName", currentUserAccountName);
    		}
    		else
    		{
    			currentUserAccountNameParameter = new ObjectParameter("CurrentUserAccountName", typeof(string));
    		}
    
    		ObjectParameter userIDParameter;
    
    		if (userID.HasValue)
    		{
    			userIDParameter = new ObjectParameter("UserID", userID);
    		}
    		else
    		{
    			userIDParameter = new ObjectParameter("UserID", typeof(long));
    		}
    
    		ObjectParameter groupIDParameter;
    
    		if (groupID.HasValue)
    		{
    			groupIDParameter = new ObjectParameter("GroupID", groupID);
    		}
    		else
    		{
    			groupIDParameter = new ObjectParameter("GroupID", typeof(long));
    		}
    		return base.ExecuteFunction<Nullable<long>>("BulkReassignOfficerResponsible", fromOfficerResponsibleIDParameter, toOfficerResponsibleIDParameter, currentUserAccountNameParameter, userIDParameter, groupIDParameter);
    
    	}
    	public ObjectResult<Nullable<long>> ListIRISObjectIDsForOfficerResponsible(Nullable<long> userID)    
    	{
    
    		ObjectParameter userIDParameter;
    
    		if (userID.HasValue)
    		{
    			userIDParameter = new ObjectParameter("UserID", userID);
    		}
    		else
    		{
    			userIDParameter = new ObjectParameter("UserID", typeof(long));
    		}
    		return base.ExecuteFunction<Nullable<long>>("ListIRISObjectIDsForOfficerResponsible", userIDParameter);
    
    	}
    	public ObjectResult<BatchRollForwardAnnualChargeResult> RollForwardAnnualCharges(Nullable<long> matchingYear, Nullable<long> matchingPeriod, Nullable<long> toYear, Nullable<long> toPeriod, string currentUserAccountName)    
    	{
    
    		ObjectParameter matchingYearParameter;
    
    		if (matchingYear.HasValue)
    		{
    			matchingYearParameter = new ObjectParameter("MatchingYear", matchingYear);
    		}
    		else
    		{
    			matchingYearParameter = new ObjectParameter("MatchingYear", typeof(long));
    		}
    
    		ObjectParameter matchingPeriodParameter;
    
    		if (matchingPeriod.HasValue)
    		{
    			matchingPeriodParameter = new ObjectParameter("MatchingPeriod", matchingPeriod);
    		}
    		else
    		{
    			matchingPeriodParameter = new ObjectParameter("MatchingPeriod", typeof(long));
    		}
    
    		ObjectParameter toYearParameter;
    
    		if (toYear.HasValue)
    		{
    			toYearParameter = new ObjectParameter("ToYear", toYear);
    		}
    		else
    		{
    			toYearParameter = new ObjectParameter("ToYear", typeof(long));
    		}
    
    		ObjectParameter toPeriodParameter;
    
    		if (toPeriod.HasValue)
    		{
    			toPeriodParameter = new ObjectParameter("ToPeriod", toPeriod);
    		}
    		else
    		{
    			toPeriodParameter = new ObjectParameter("ToPeriod", typeof(long));
    		}
    
    		ObjectParameter currentUserAccountNameParameter;
    
    		if (currentUserAccountName != null)
    		{
    			currentUserAccountNameParameter = new ObjectParameter("CurrentUserAccountName", currentUserAccountName);
    		}
    		else
    		{
    			currentUserAccountNameParameter = new ObjectParameter("CurrentUserAccountName", typeof(string));
    		}
    		return base.ExecuteFunction<BatchRollForwardAnnualChargeResult>("RollForwardAnnualCharges", matchingYearParameter, matchingPeriodParameter, toYearParameter, toPeriodParameter, currentUserAccountNameParameter);
    
    	}
    	public void CalculateWorkingDays(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<long> applicationID, ObjectParameter numWorkingDays)    
    	{
    
    		ObjectParameter startDateParameter;
    
    		if (startDate.HasValue)
    		{
    			startDateParameter = new ObjectParameter("StartDate", startDate);
    		}
    		else
    		{
    			startDateParameter = new ObjectParameter("StartDate", typeof(System.DateTime));
    		}
    
    		ObjectParameter endDateParameter;
    
    		if (endDate.HasValue)
    		{
    			endDateParameter = new ObjectParameter("EndDate", endDate);
    		}
    		else
    		{
    			endDateParameter = new ObjectParameter("EndDate", typeof(System.DateTime));
    		}
    
    		ObjectParameter applicationIDParameter;
    
    		if (applicationID.HasValue)
    		{
    			applicationIDParameter = new ObjectParameter("ApplicationID", applicationID);
    		}
    		else
    		{
    			applicationIDParameter = new ObjectParameter("ApplicationID", typeof(long));
    		}
    		base.ExecuteFunction("CalculateWorkingDays", startDateParameter, endDateParameter, applicationIDParameter, numWorkingDays);
    
    	}
    	public void AdvancedSearchGeneralRegister(Nullable<long> scopeObjectTypeID, Nullable<long> userID, Nullable<bool> isSpatialSearch, string spatialIDs, Nullable<long> registerTypeID, string registerStatusIDs, string basicSearchKeywords, string contactOrganisationPersonName, string linkedContactRelationshipTypeIDs, string cdfCriteria, ObjectParameter errorCode, ObjectParameter searchHeaderID)    
    	{
    
    		ObjectParameter scopeObjectTypeIDParameter;
    
    		if (scopeObjectTypeID.HasValue)
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", scopeObjectTypeID);
    		}
    		else
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", typeof(long));
    		}
    
    		ObjectParameter userIDParameter;
    
    		if (userID.HasValue)
    		{
    			userIDParameter = new ObjectParameter("UserID", userID);
    		}
    		else
    		{
    			userIDParameter = new ObjectParameter("UserID", typeof(long));
    		}
    
    		ObjectParameter isSpatialSearchParameter;
    
    		if (isSpatialSearch.HasValue)
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", isSpatialSearch);
    		}
    		else
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", typeof(bool));
    		}
    
    		ObjectParameter spatialIDsParameter;
    
    		if (spatialIDs != null)
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", spatialIDs);
    		}
    		else
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", typeof(string));
    		}
    
    		ObjectParameter registerTypeIDParameter;
    
    		if (registerTypeID.HasValue)
    		{
    			registerTypeIDParameter = new ObjectParameter("RegisterTypeID", registerTypeID);
    		}
    		else
    		{
    			registerTypeIDParameter = new ObjectParameter("RegisterTypeID", typeof(long));
    		}
    
    		ObjectParameter registerStatusIDsParameter;
    
    		if (registerStatusIDs != null)
    		{
    			registerStatusIDsParameter = new ObjectParameter("RegisterStatusIDs", registerStatusIDs);
    		}
    		else
    		{
    			registerStatusIDsParameter = new ObjectParameter("RegisterStatusIDs", typeof(string));
    		}
    
    		ObjectParameter basicSearchKeywordsParameter;
    
    		if (basicSearchKeywords != null)
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", basicSearchKeywords);
    		}
    		else
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", typeof(string));
    		}
    
    		ObjectParameter contactOrganisationPersonNameParameter;
    
    		if (contactOrganisationPersonName != null)
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", contactOrganisationPersonName);
    		}
    		else
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", typeof(string));
    		}
    
    		ObjectParameter linkedContactRelationshipTypeIDsParameter;
    
    		if (linkedContactRelationshipTypeIDs != null)
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", linkedContactRelationshipTypeIDs);
    		}
    		else
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", typeof(string));
    		}
    
    		ObjectParameter cdfCriteriaParameter;
    
    		if (cdfCriteria != null)
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", cdfCriteria);
    		}
    		else
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", typeof(string));
    		}
    		base.ExecuteFunction("AdvancedSearchGeneralRegister", scopeObjectTypeIDParameter, userIDParameter, isSpatialSearchParameter, spatialIDsParameter, registerTypeIDParameter, registerStatusIDsParameter, basicSearchKeywordsParameter, contactOrganisationPersonNameParameter, linkedContactRelationshipTypeIDsParameter, cdfCriteriaParameter, errorCode, searchHeaderID);
    
    	}
    	public ObjectResult<string> GetBusinessDataXML(Nullable<long> iRISObjectId, string objectTypeCode, Nullable<long> parentIRISObjectId)    
    	{
    
    		ObjectParameter iRISObjectIdParameter;
    
    		if (iRISObjectId.HasValue)
    		{
    			iRISObjectIdParameter = new ObjectParameter("IRISObjectId", iRISObjectId);
    		}
    		else
    		{
    			iRISObjectIdParameter = new ObjectParameter("IRISObjectId", typeof(long));
    		}
    
    		ObjectParameter objectTypeCodeParameter;
    
    		if (objectTypeCode != null)
    		{
    			objectTypeCodeParameter = new ObjectParameter("ObjectTypeCode", objectTypeCode);
    		}
    		else
    		{
    			objectTypeCodeParameter = new ObjectParameter("ObjectTypeCode", typeof(string));
    		}
    
    		ObjectParameter parentIRISObjectIdParameter;
    
    		if (parentIRISObjectId.HasValue)
    		{
    			parentIRISObjectIdParameter = new ObjectParameter("ParentIRISObjectId", parentIRISObjectId);
    		}
    		else
    		{
    			parentIRISObjectIdParameter = new ObjectParameter("ParentIRISObjectId", typeof(long));
    		}
    		return base.ExecuteFunction<string>("GetBusinessDataXML", iRISObjectIdParameter, objectTypeCodeParameter, parentIRISObjectIdParameter);
    
    	}
    	public ObjectResult<IRISObject> BatchJob_GetIRISObjectWithoutWorkflowForLastNumberDays(Nullable<int> numberOfDays, string objectType)    
    	{
    
    		ObjectParameter numberOfDaysParameter;
    
    		if (numberOfDays.HasValue)
    		{
    			numberOfDaysParameter = new ObjectParameter("NumberOfDays", numberOfDays);
    		}
    		else
    		{
    			numberOfDaysParameter = new ObjectParameter("NumberOfDays", typeof(int));
    		}
    
    		ObjectParameter objectTypeParameter;
    
    		if (objectType != null)
    		{
    			objectTypeParameter = new ObjectParameter("ObjectType", objectType);
    		}
    		else
    		{
    			objectTypeParameter = new ObjectParameter("ObjectType", typeof(string));
    		}
    		return base.ExecuteFunction<IRISObject>("BatchJob_GetIRISObjectWithoutWorkflowForLastNumberDays", numberOfDaysParameter, objectTypeParameter);
    
    	}
    	public ObjectResult<IRISObject> BatchJob_GetRegimeActivityForMobileForLastNumberDays(Nullable<int> numberOfDays)    
    	{
    
    		ObjectParameter numberOfDaysParameter;
    
    		if (numberOfDays.HasValue)
    		{
    			numberOfDaysParameter = new ObjectParameter("NumberOfDays", numberOfDays);
    		}
    		else
    		{
    			numberOfDaysParameter = new ObjectParameter("NumberOfDays", typeof(int));
    		}
    		return base.ExecuteFunction<IRISObject>("BatchJob_GetRegimeActivityForMobileForLastNumberDays", numberOfDaysParameter);
    
    	}
    	public void DeleteObject(Nullable<long> objectId, string objectTypeCode)    
    	{
    
    		ObjectParameter objectIdParameter;
    
    		if (objectId.HasValue)
    		{
    			objectIdParameter = new ObjectParameter("ObjectId", objectId);
    		}
    		else
    		{
    			objectIdParameter = new ObjectParameter("ObjectId", typeof(long));
    		}
    
    		ObjectParameter objectTypeCodeParameter;
    
    		if (objectTypeCode != null)
    		{
    			objectTypeCodeParameter = new ObjectParameter("ObjectTypeCode", objectTypeCode);
    		}
    		else
    		{
    			objectTypeCodeParameter = new ObjectParameter("ObjectTypeCode", typeof(string));
    		}
    		base.ExecuteFunction("DeleteObject", objectIdParameter, objectTypeCodeParameter);
    
    	}
    	public void DeleteSpatialLocation(Nullable<long> iRISObjectID)    
    	{
    
    		ObjectParameter iRISObjectIDParameter;
    
    		if (iRISObjectID.HasValue)
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", iRISObjectID);
    		}
    		else
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", typeof(long));
    		}
    		base.ExecuteFunction("DeleteSpatialLocation", iRISObjectIDParameter);
    
    	}
    	public void GetLatestSingleSpatialLocation(Nullable<long> iRISObjectID, ObjectParameter xcoordinate, ObjectParameter ycoordinate)    
    	{
    
    		ObjectParameter iRISObjectIDParameter;
    
    		if (iRISObjectID.HasValue)
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", iRISObjectID);
    		}
    		else
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", typeof(long));
    		}
    		base.ExecuteFunction("GetLatestSingleSpatialLocation", iRISObjectIDParameter, xcoordinate, ycoordinate);
    
    	}
    	public void GetMergedToContactID(Nullable<long> contactID, ObjectParameter mergedToContactID)    
    	{
    
    		ObjectParameter contactIDParameter;
    
    		if (contactID.HasValue)
    		{
    			contactIDParameter = new ObjectParameter("ContactID", contactID);
    		}
    		else
    		{
    			contactIDParameter = new ObjectParameter("ContactID", typeof(long));
    		}
    		base.ExecuteFunction("GetMergedToContactID", contactIDParameter, mergedToContactID);
    
    	}
    	public ObjectResult<string> GetOnlineServiceObjectDetailsXML(Nullable<long> objectId, string objectTypeCode)    
    	{
    
    		ObjectParameter objectIdParameter;
    
    		if (objectId.HasValue)
    		{
    			objectIdParameter = new ObjectParameter("ObjectId", objectId);
    		}
    		else
    		{
    			objectIdParameter = new ObjectParameter("ObjectId", typeof(long));
    		}
    
    		ObjectParameter objectTypeCodeParameter;
    
    		if (objectTypeCode != null)
    		{
    			objectTypeCodeParameter = new ObjectParameter("ObjectTypeCode", objectTypeCode);
    		}
    		else
    		{
    			objectTypeCodeParameter = new ObjectParameter("ObjectTypeCode", typeof(string));
    		}
    		return base.ExecuteFunction<string>("GetOnlineServiceObjectDetailsXML", objectIdParameter, objectTypeCodeParameter);
    
    	}
    	public void UpdateActivityObjectRelationshipReference(string tableName, string columnName, Nullable<long> oldLinkID, Nullable<long> newLinkID)    
    	{
    
    		ObjectParameter tableNameParameter;
    
    		if (tableName != null)
    		{
    			tableNameParameter = new ObjectParameter("TableName", tableName);
    		}
    		else
    		{
    			tableNameParameter = new ObjectParameter("TableName", typeof(string));
    		}
    
    		ObjectParameter columnNameParameter;
    
    		if (columnName != null)
    		{
    			columnNameParameter = new ObjectParameter("ColumnName", columnName);
    		}
    		else
    		{
    			columnNameParameter = new ObjectParameter("ColumnName", typeof(string));
    		}
    
    		ObjectParameter oldLinkIDParameter;
    
    		if (oldLinkID.HasValue)
    		{
    			oldLinkIDParameter = new ObjectParameter("OldLinkID", oldLinkID);
    		}
    		else
    		{
    			oldLinkIDParameter = new ObjectParameter("OldLinkID", typeof(long));
    		}
    
    		ObjectParameter newLinkIDParameter;
    
    		if (newLinkID.HasValue)
    		{
    			newLinkIDParameter = new ObjectParameter("NewLinkID", newLinkID);
    		}
    		else
    		{
    			newLinkIDParameter = new ObjectParameter("NewLinkID", typeof(long));
    		}
    		base.ExecuteFunction("UpdateActivityObjectRelationshipReference", tableNameParameter, columnNameParameter, oldLinkIDParameter, newLinkIDParameter);
    
    	}
    	public void CalculateFinalDateForFilingChargingDocuments(Nullable<long> enforcementID, ObjectParameter dueDate)    
    	{
    
    		ObjectParameter enforcementIDParameter;
    
    		if (enforcementID.HasValue)
    		{
    			enforcementIDParameter = new ObjectParameter("EnforcementID", enforcementID);
    		}
    		else
    		{
    			enforcementIDParameter = new ObjectParameter("EnforcementID", typeof(long));
    		}
    		base.ExecuteFunction("CalculateFinalDateForFilingChargingDocuments", enforcementIDParameter, dueDate);
    
    	}
    	public ObjectResult<string> GetRegisterObjectDetailsXML(Nullable<long> objectId)    
    	{
    
    		ObjectParameter objectIdParameter;
    
    		if (objectId.HasValue)
    		{
    			objectIdParameter = new ObjectParameter("ObjectId", objectId);
    		}
    		else
    		{
    			objectIdParameter = new ObjectParameter("ObjectId", typeof(long));
    		}
    		return base.ExecuteFunction<string>("GetRegisterObjectDetailsXML", objectIdParameter);
    
    	}
    	public void CreateSearchV2(string searchCriteria, Nullable<long> scopeObjectTypeID, Nullable<long> scopeSubClass1ID, Nullable<long> userID, Nullable<bool> isSpatialSearch, ObjectParameter searchHeaderID, ObjectParameter errorCode)    
    	{
    
    		ObjectParameter searchCriteriaParameter;
    
    		if (searchCriteria != null)
    		{
    			searchCriteriaParameter = new ObjectParameter("SearchCriteria", searchCriteria);
    		}
    		else
    		{
    			searchCriteriaParameter = new ObjectParameter("SearchCriteria", typeof(string));
    		}
    
    		ObjectParameter scopeObjectTypeIDParameter;
    
    		if (scopeObjectTypeID.HasValue)
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", scopeObjectTypeID);
    		}
    		else
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", typeof(long));
    		}
    
    		ObjectParameter scopeSubClass1IDParameter;
    
    		if (scopeSubClass1ID.HasValue)
    		{
    			scopeSubClass1IDParameter = new ObjectParameter("ScopeSubClass1ID", scopeSubClass1ID);
    		}
    		else
    		{
    			scopeSubClass1IDParameter = new ObjectParameter("ScopeSubClass1ID", typeof(long));
    		}
    
    		ObjectParameter userIDParameter;
    
    		if (userID.HasValue)
    		{
    			userIDParameter = new ObjectParameter("UserID", userID);
    		}
    		else
    		{
    			userIDParameter = new ObjectParameter("UserID", typeof(long));
    		}
    
    		ObjectParameter isSpatialSearchParameter;
    
    		if (isSpatialSearch.HasValue)
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", isSpatialSearch);
    		}
    		else
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", typeof(bool));
    		}
    		base.ExecuteFunction("CreateSearchV2", searchCriteriaParameter, scopeObjectTypeIDParameter, scopeSubClass1IDParameter, userIDParameter, isSpatialSearchParameter, searchHeaderID, errorCode);
    
    	}
    	public void RunSearchV2(Nullable<long> searchHeaderID)    
    	{
    
    		ObjectParameter searchHeaderIDParameter;
    
    		if (searchHeaderID.HasValue)
    		{
    			searchHeaderIDParameter = new ObjectParameter("SearchHeaderID", searchHeaderID);
    		}
    		else
    		{
    			searchHeaderIDParameter = new ObjectParameter("SearchHeaderID", typeof(long));
    		}
    		base.ExecuteFunction("RunSearchV2", searchHeaderIDParameter);
    
    	}
    	public ObjectResult<SearchIndex> SelectSearchResultsByPageV2(Nullable<long> searchHeaderID, string sortExpression, Nullable<int> pageSize, Nullable<int> pageCount, string excludeObjectIDs, ObjectParameter searchCount)    
    	{
    
    		ObjectParameter searchHeaderIDParameter;
    
    		if (searchHeaderID.HasValue)
    		{
    			searchHeaderIDParameter = new ObjectParameter("SearchHeaderID", searchHeaderID);
    		}
    		else
    		{
    			searchHeaderIDParameter = new ObjectParameter("SearchHeaderID", typeof(long));
    		}
    
    		ObjectParameter sortExpressionParameter;
    
    		if (sortExpression != null)
    		{
    			sortExpressionParameter = new ObjectParameter("SortExpression", sortExpression);
    		}
    		else
    		{
    			sortExpressionParameter = new ObjectParameter("SortExpression", typeof(string));
    		}
    
    		ObjectParameter pageSizeParameter;
    
    		if (pageSize.HasValue)
    		{
    			pageSizeParameter = new ObjectParameter("PageSize", pageSize);
    		}
    		else
    		{
    			pageSizeParameter = new ObjectParameter("PageSize", typeof(int));
    		}
    
    		ObjectParameter pageCountParameter;
    
    		if (pageCount.HasValue)
    		{
    			pageCountParameter = new ObjectParameter("PageCount", pageCount);
    		}
    		else
    		{
    			pageCountParameter = new ObjectParameter("PageCount", typeof(int));
    		}
    
    		ObjectParameter excludeObjectIDsParameter;
    
    		if (excludeObjectIDs != null)
    		{
    			excludeObjectIDsParameter = new ObjectParameter("ExcludeObjectIDs", excludeObjectIDs);
    		}
    		else
    		{
    			excludeObjectIDsParameter = new ObjectParameter("ExcludeObjectIDs", typeof(string));
    		}
    		return base.ExecuteFunction<SearchIndex>("SelectSearchResultsByPageV2", searchHeaderIDParameter, sortExpressionParameter, pageSizeParameter, pageCountParameter, excludeObjectIDsParameter, searchCount);
    
    	}
    	public void DeleteSearchSuggestion(Nullable<long> searchHeaderId)    
    	{
    
    		ObjectParameter searchHeaderIdParameter;
    
    		if (searchHeaderId.HasValue)
    		{
    			searchHeaderIdParameter = new ObjectParameter("SearchHeaderId", searchHeaderId);
    		}
    		else
    		{
    			searchHeaderIdParameter = new ObjectParameter("SearchHeaderId", typeof(long));
    		}
    		base.ExecuteFunction("DeleteSearchSuggestion", searchHeaderIdParameter);
    
    	}
    	public ObjectResult<Nullable<int>> GetSearchResultsCount(string searchCriteria, Nullable<long> scopeObjectTypeId, Nullable<long> userId)    
    	{
    
    		ObjectParameter searchCriteriaParameter;
    
    		if (searchCriteria != null)
    		{
    			searchCriteriaParameter = new ObjectParameter("SearchCriteria", searchCriteria);
    		}
    		else
    		{
    			searchCriteriaParameter = new ObjectParameter("SearchCriteria", typeof(string));
    		}
    
    		ObjectParameter scopeObjectTypeIdParameter;
    
    		if (scopeObjectTypeId.HasValue)
    		{
    			scopeObjectTypeIdParameter = new ObjectParameter("ScopeObjectTypeId", scopeObjectTypeId);
    		}
    		else
    		{
    			scopeObjectTypeIdParameter = new ObjectParameter("ScopeObjectTypeId", typeof(long));
    		}
    
    		ObjectParameter userIdParameter;
    
    		if (userId.HasValue)
    		{
    			userIdParameter = new ObjectParameter("UserId", userId);
    		}
    		else
    		{
    			userIdParameter = new ObjectParameter("UserId", typeof(long));
    		}
    		return base.ExecuteFunction<Nullable<int>>("GetSearchResultsCount", searchCriteriaParameter, scopeObjectTypeIdParameter, userIdParameter);
    
    	}
    	public ObjectResult<SearchSuggestions> GetSearchSuggestions(string searchCriteria, Nullable<long> scopeObjectTypeId, Nullable<long> userId)    
    	{
    
    		ObjectParameter searchCriteriaParameter;
    
    		if (searchCriteria != null)
    		{
    			searchCriteriaParameter = new ObjectParameter("SearchCriteria", searchCriteria);
    		}
    		else
    		{
    			searchCriteriaParameter = new ObjectParameter("SearchCriteria", typeof(string));
    		}
    
    		ObjectParameter scopeObjectTypeIdParameter;
    
    		if (scopeObjectTypeId.HasValue)
    		{
    			scopeObjectTypeIdParameter = new ObjectParameter("ScopeObjectTypeId", scopeObjectTypeId);
    		}
    		else
    		{
    			scopeObjectTypeIdParameter = new ObjectParameter("ScopeObjectTypeId", typeof(long));
    		}
    
    		ObjectParameter userIdParameter;
    
    		if (userId.HasValue)
    		{
    			userIdParameter = new ObjectParameter("UserId", userId);
    		}
    		else
    		{
    			userIdParameter = new ObjectParameter("UserId", typeof(long));
    		}
    		return base.ExecuteFunction<SearchSuggestions>("GetSearchSuggestions", searchCriteriaParameter, scopeObjectTypeIdParameter, userIdParameter);
    
    	}
    	public ObjectResult<string> GetCDFListNameWithMissingMandatoryAnswer(Nullable<long> iRISObjectID)    
    	{
    
    		ObjectParameter iRISObjectIDParameter;
    
    		if (iRISObjectID.HasValue)
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", iRISObjectID);
    		}
    		else
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", typeof(long));
    		}
    		return base.ExecuteFunction<string>("GetCDFListNameWithMissingMandatoryAnswer", iRISObjectIDParameter);
    
    	}
    	public void IndexForCDFSearchableQuestionDefinition(Nullable<long> questionDefinitionId)    
    	{
    
    		ObjectParameter questionDefinitionIdParameter;
    
    		if (questionDefinitionId.HasValue)
    		{
    			questionDefinitionIdParameter = new ObjectParameter("QuestionDefinitionId", questionDefinitionId);
    		}
    		else
    		{
    			questionDefinitionIdParameter = new ObjectParameter("QuestionDefinitionId", typeof(long));
    		}
    		base.ExecuteFunction("IndexForCDFSearchableQuestionDefinition", questionDefinitionIdParameter);
    
    	}
    	public void CopyActivityCDFAnswersToAuthorisation(Nullable<long> authorisationID)    
    	{
    
    		ObjectParameter authorisationIDParameter;
    
    		if (authorisationID.HasValue)
    		{
    			authorisationIDParameter = new ObjectParameter("AuthorisationID", authorisationID);
    		}
    		else
    		{
    			authorisationIDParameter = new ObjectParameter("AuthorisationID", typeof(long));
    		}
    		base.ExecuteFunction("CopyActivityCDFAnswersToAuthorisation", authorisationIDParameter);
    
    	}
    	public ObjectResult<ParentReferenceDataSummary> ListReferenceDataCollectionParentValues(Nullable<long> collectionID)    
    	{
    
    		ObjectParameter collectionIDParameter;
    
    		if (collectionID.HasValue)
    		{
    			collectionIDParameter = new ObjectParameter("CollectionID", collectionID);
    		}
    		else
    		{
    			collectionIDParameter = new ObjectParameter("CollectionID", typeof(long));
    		}
    		return base.ExecuteFunction<ParentReferenceDataSummary>("ListReferenceDataCollectionParentValues", collectionIDParameter);
    
    	}
    	public void ReIndexIRISObject(Nullable<long> irisObjectId)    
    	{
    
    		ObjectParameter irisObjectIdParameter;
    
    		if (irisObjectId.HasValue)
    		{
    			irisObjectIdParameter = new ObjectParameter("IrisObjectId", irisObjectId);
    		}
    		else
    		{
    			irisObjectIdParameter = new ObjectParameter("IrisObjectId", typeof(long));
    		}
    		base.ExecuteFunction("ReIndexIRISObject", irisObjectIdParameter);
    
    	}
    	public ObjectResult<LinkedObjectDTO> ListLinkedObjects(string userName, Nullable<long> iRISObjectID, Nullable<bool> includeExpiredLinks, string searchForObjectTypeIDsSummary, string includedObjectTypeCodes, string excludedObjectTypeCodes, string includeRelationshipTypeCodes, string excludeRelationshipTypeCodes, string sortColumn, string sortDirection, Nullable<int> pageSize, Nullable<int> pageNumber)    
    	{
    
    		ObjectParameter userNameParameter;
    
    		if (userName != null)
    		{
    			userNameParameter = new ObjectParameter("UserName", userName);
    		}
    		else
    		{
    			userNameParameter = new ObjectParameter("UserName", typeof(string));
    		}
    
    		ObjectParameter iRISObjectIDParameter;
    
    		if (iRISObjectID.HasValue)
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", iRISObjectID);
    		}
    		else
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", typeof(long));
    		}
    
    		ObjectParameter includeExpiredLinksParameter;
    
    		if (includeExpiredLinks.HasValue)
    		{
    			includeExpiredLinksParameter = new ObjectParameter("IncludeExpiredLinks", includeExpiredLinks);
    		}
    		else
    		{
    			includeExpiredLinksParameter = new ObjectParameter("IncludeExpiredLinks", typeof(bool));
    		}
    
    		ObjectParameter searchForObjectTypeIDsSummaryParameter;
    
    		if (searchForObjectTypeIDsSummary != null)
    		{
    			searchForObjectTypeIDsSummaryParameter = new ObjectParameter("SearchForObjectTypeIDsSummary", searchForObjectTypeIDsSummary);
    		}
    		else
    		{
    			searchForObjectTypeIDsSummaryParameter = new ObjectParameter("SearchForObjectTypeIDsSummary", typeof(string));
    		}
    
    		ObjectParameter includedObjectTypeCodesParameter;
    
    		if (includedObjectTypeCodes != null)
    		{
    			includedObjectTypeCodesParameter = new ObjectParameter("IncludedObjectTypeCodes", includedObjectTypeCodes);
    		}
    		else
    		{
    			includedObjectTypeCodesParameter = new ObjectParameter("IncludedObjectTypeCodes", typeof(string));
    		}
    
    		ObjectParameter excludedObjectTypeCodesParameter;
    
    		if (excludedObjectTypeCodes != null)
    		{
    			excludedObjectTypeCodesParameter = new ObjectParameter("ExcludedObjectTypeCodes", excludedObjectTypeCodes);
    		}
    		else
    		{
    			excludedObjectTypeCodesParameter = new ObjectParameter("ExcludedObjectTypeCodes", typeof(string));
    		}
    
    		ObjectParameter includeRelationshipTypeCodesParameter;
    
    		if (includeRelationshipTypeCodes != null)
    		{
    			includeRelationshipTypeCodesParameter = new ObjectParameter("IncludeRelationshipTypeCodes", includeRelationshipTypeCodes);
    		}
    		else
    		{
    			includeRelationshipTypeCodesParameter = new ObjectParameter("IncludeRelationshipTypeCodes", typeof(string));
    		}
    
    		ObjectParameter excludeRelationshipTypeCodesParameter;
    
    		if (excludeRelationshipTypeCodes != null)
    		{
    			excludeRelationshipTypeCodesParameter = new ObjectParameter("ExcludeRelationshipTypeCodes", excludeRelationshipTypeCodes);
    		}
    		else
    		{
    			excludeRelationshipTypeCodesParameter = new ObjectParameter("ExcludeRelationshipTypeCodes", typeof(string));
    		}
    
    		ObjectParameter sortColumnParameter;
    
    		if (sortColumn != null)
    		{
    			sortColumnParameter = new ObjectParameter("SortColumn", sortColumn);
    		}
    		else
    		{
    			sortColumnParameter = new ObjectParameter("SortColumn", typeof(string));
    		}
    
    		ObjectParameter sortDirectionParameter;
    
    		if (sortDirection != null)
    		{
    			sortDirectionParameter = new ObjectParameter("SortDirection", sortDirection);
    		}
    		else
    		{
    			sortDirectionParameter = new ObjectParameter("SortDirection", typeof(string));
    		}
    
    		ObjectParameter pageSizeParameter;
    
    		if (pageSize.HasValue)
    		{
    			pageSizeParameter = new ObjectParameter("PageSize", pageSize);
    		}
    		else
    		{
    			pageSizeParameter = new ObjectParameter("PageSize", typeof(int));
    		}
    
    		ObjectParameter pageNumberParameter;
    
    		if (pageNumber.HasValue)
    		{
    			pageNumberParameter = new ObjectParameter("PageNumber", pageNumber);
    		}
    		else
    		{
    			pageNumberParameter = new ObjectParameter("PageNumber", typeof(int));
    		}
    		return base.ExecuteFunction<LinkedObjectDTO>("ListLinkedObjects", userNameParameter, iRISObjectIDParameter, includeExpiredLinksParameter, searchForObjectTypeIDsSummaryParameter, includedObjectTypeCodesParameter, excludedObjectTypeCodesParameter, includeRelationshipTypeCodesParameter, excludeRelationshipTypeCodesParameter, sortColumnParameter, sortDirectionParameter, pageSizeParameter, pageNumberParameter);
    
    	}
    	public ObjectResult<ActivityObjectRelationship> ListActivityObjectRelationships(string userName, string activityObjectRelationshipIDs)    
    	{
    
    		ObjectParameter userNameParameter;
    
    		if (userName != null)
    		{
    			userNameParameter = new ObjectParameter("UserName", userName);
    		}
    		else
    		{
    			userNameParameter = new ObjectParameter("UserName", typeof(string));
    		}
    
    		ObjectParameter activityObjectRelationshipIDsParameter;
    
    		if (activityObjectRelationshipIDs != null)
    		{
    			activityObjectRelationshipIDsParameter = new ObjectParameter("ActivityObjectRelationshipIDs", activityObjectRelationshipIDs);
    		}
    		else
    		{
    			activityObjectRelationshipIDsParameter = new ObjectParameter("ActivityObjectRelationshipIDs", typeof(string));
    		}
    		return base.ExecuteFunction<ActivityObjectRelationship>("ListActivityObjectRelationships", userNameParameter, activityObjectRelationshipIDsParameter);
    
    	}
    	public void ContactBulkLoadItemDelete(Nullable<System.Guid> batchGuid)    
    	{
    
    		ObjectParameter batchGuidParameter;
    
    		if (batchGuid.HasValue)
    		{
    			batchGuidParameter = new ObjectParameter("BatchGuid", batchGuid);
    		}
    		else
    		{
    			batchGuidParameter = new ObjectParameter("BatchGuid", typeof(System.Guid));
    		}
    		base.ExecuteFunction("ContactBulkLoadItemDelete", batchGuidParameter);
    
    	}
    	public void AdvancedSearchContact(Nullable<long> scopeObjectTypeID, Nullable<long> userID, Nullable<bool> isSpatialSearch, string spatialIDs, Nullable<long> contactID, Nullable<bool> includeDuplicates, Nullable<bool> excludeDeceased, string firstName, string lastName, string orgName, Nullable<long> orgCompanyNumber, Nullable<int> streetNumber, string streetAlpha, string streetName, string suburb, string phoneNumber, string towncityUrban, string towncityDelivery, string deliveryServiceIdentifier, string boxLobby, string address, Nullable<long> countryID, string basicSearchKeywords, string contactOrganisationPersonName, string linkedContactRelationshipTypeIDs, string cdfCriteria, ObjectParameter errorCode, ObjectParameter searchHeaderID)    
    	{
    
    		ObjectParameter scopeObjectTypeIDParameter;
    
    		if (scopeObjectTypeID.HasValue)
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", scopeObjectTypeID);
    		}
    		else
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", typeof(long));
    		}
    
    		ObjectParameter userIDParameter;
    
    		if (userID.HasValue)
    		{
    			userIDParameter = new ObjectParameter("UserID", userID);
    		}
    		else
    		{
    			userIDParameter = new ObjectParameter("UserID", typeof(long));
    		}
    
    		ObjectParameter isSpatialSearchParameter;
    
    		if (isSpatialSearch.HasValue)
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", isSpatialSearch);
    		}
    		else
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", typeof(bool));
    		}
    
    		ObjectParameter spatialIDsParameter;
    
    		if (spatialIDs != null)
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", spatialIDs);
    		}
    		else
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", typeof(string));
    		}
    
    		ObjectParameter contactIDParameter;
    
    		if (contactID.HasValue)
    		{
    			contactIDParameter = new ObjectParameter("contactID", contactID);
    		}
    		else
    		{
    			contactIDParameter = new ObjectParameter("contactID", typeof(long));
    		}
    
    		ObjectParameter includeDuplicatesParameter;
    
    		if (includeDuplicates.HasValue)
    		{
    			includeDuplicatesParameter = new ObjectParameter("includeDuplicates", includeDuplicates);
    		}
    		else
    		{
    			includeDuplicatesParameter = new ObjectParameter("includeDuplicates", typeof(bool));
    		}
    
    		ObjectParameter excludeDeceasedParameter;
    
    		if (excludeDeceased.HasValue)
    		{
    			excludeDeceasedParameter = new ObjectParameter("excludeDeceased", excludeDeceased);
    		}
    		else
    		{
    			excludeDeceasedParameter = new ObjectParameter("excludeDeceased", typeof(bool));
    		}
    
    		ObjectParameter firstNameParameter;
    
    		if (firstName != null)
    		{
    			firstNameParameter = new ObjectParameter("firstName", firstName);
    		}
    		else
    		{
    			firstNameParameter = new ObjectParameter("firstName", typeof(string));
    		}
    
    		ObjectParameter lastNameParameter;
    
    		if (lastName != null)
    		{
    			lastNameParameter = new ObjectParameter("lastName", lastName);
    		}
    		else
    		{
    			lastNameParameter = new ObjectParameter("lastName", typeof(string));
    		}
    
    		ObjectParameter orgNameParameter;
    
    		if (orgName != null)
    		{
    			orgNameParameter = new ObjectParameter("orgName", orgName);
    		}
    		else
    		{
    			orgNameParameter = new ObjectParameter("orgName", typeof(string));
    		}
    
    		ObjectParameter orgCompanyNumberParameter;
    
    		if (orgCompanyNumber.HasValue)
    		{
    			orgCompanyNumberParameter = new ObjectParameter("orgCompanyNumber", orgCompanyNumber);
    		}
    		else
    		{
    			orgCompanyNumberParameter = new ObjectParameter("orgCompanyNumber", typeof(long));
    		}
    
    		ObjectParameter streetNumberParameter;
    
    		if (streetNumber.HasValue)
    		{
    			streetNumberParameter = new ObjectParameter("streetNumber", streetNumber);
    		}
    		else
    		{
    			streetNumberParameter = new ObjectParameter("streetNumber", typeof(int));
    		}
    
    		ObjectParameter streetAlphaParameter;
    
    		if (streetAlpha != null)
    		{
    			streetAlphaParameter = new ObjectParameter("streetAlpha", streetAlpha);
    		}
    		else
    		{
    			streetAlphaParameter = new ObjectParameter("streetAlpha", typeof(string));
    		}
    
    		ObjectParameter streetNameParameter;
    
    		if (streetName != null)
    		{
    			streetNameParameter = new ObjectParameter("streetName", streetName);
    		}
    		else
    		{
    			streetNameParameter = new ObjectParameter("streetName", typeof(string));
    		}
    
    		ObjectParameter suburbParameter;
    
    		if (suburb != null)
    		{
    			suburbParameter = new ObjectParameter("suburb", suburb);
    		}
    		else
    		{
    			suburbParameter = new ObjectParameter("suburb", typeof(string));
    		}
    
    		ObjectParameter phoneNumberParameter;
    
    		if (phoneNumber != null)
    		{
    			phoneNumberParameter = new ObjectParameter("phoneNumber", phoneNumber);
    		}
    		else
    		{
    			phoneNumberParameter = new ObjectParameter("phoneNumber", typeof(string));
    		}
    
    		ObjectParameter towncityUrbanParameter;
    
    		if (towncityUrban != null)
    		{
    			towncityUrbanParameter = new ObjectParameter("towncityUrban", towncityUrban);
    		}
    		else
    		{
    			towncityUrbanParameter = new ObjectParameter("towncityUrban", typeof(string));
    		}
    
    		ObjectParameter towncityDeliveryParameter;
    
    		if (towncityDelivery != null)
    		{
    			towncityDeliveryParameter = new ObjectParameter("towncityDelivery", towncityDelivery);
    		}
    		else
    		{
    			towncityDeliveryParameter = new ObjectParameter("towncityDelivery", typeof(string));
    		}
    
    		ObjectParameter deliveryServiceIdentifierParameter;
    
    		if (deliveryServiceIdentifier != null)
    		{
    			deliveryServiceIdentifierParameter = new ObjectParameter("deliveryServiceIdentifier", deliveryServiceIdentifier);
    		}
    		else
    		{
    			deliveryServiceIdentifierParameter = new ObjectParameter("deliveryServiceIdentifier", typeof(string));
    		}
    
    		ObjectParameter boxLobbyParameter;
    
    		if (boxLobby != null)
    		{
    			boxLobbyParameter = new ObjectParameter("boxLobby", boxLobby);
    		}
    		else
    		{
    			boxLobbyParameter = new ObjectParameter("boxLobby", typeof(string));
    		}
    
    		ObjectParameter addressParameter;
    
    		if (address != null)
    		{
    			addressParameter = new ObjectParameter("address", address);
    		}
    		else
    		{
    			addressParameter = new ObjectParameter("address", typeof(string));
    		}
    
    		ObjectParameter countryIDParameter;
    
    		if (countryID.HasValue)
    		{
    			countryIDParameter = new ObjectParameter("countryID", countryID);
    		}
    		else
    		{
    			countryIDParameter = new ObjectParameter("countryID", typeof(long));
    		}
    
    		ObjectParameter basicSearchKeywordsParameter;
    
    		if (basicSearchKeywords != null)
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", basicSearchKeywords);
    		}
    		else
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", typeof(string));
    		}
    
    		ObjectParameter contactOrganisationPersonNameParameter;
    
    		if (contactOrganisationPersonName != null)
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", contactOrganisationPersonName);
    		}
    		else
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", typeof(string));
    		}
    
    		ObjectParameter linkedContactRelationshipTypeIDsParameter;
    
    		if (linkedContactRelationshipTypeIDs != null)
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", linkedContactRelationshipTypeIDs);
    		}
    		else
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", typeof(string));
    		}
    
    		ObjectParameter cdfCriteriaParameter;
    
    		if (cdfCriteria != null)
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", cdfCriteria);
    		}
    		else
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", typeof(string));
    		}
    		base.ExecuteFunction("AdvancedSearchContact", scopeObjectTypeIDParameter, userIDParameter, isSpatialSearchParameter, spatialIDsParameter, contactIDParameter, includeDuplicatesParameter, excludeDeceasedParameter, firstNameParameter, lastNameParameter, orgNameParameter, orgCompanyNumberParameter, streetNumberParameter, streetAlphaParameter, streetNameParameter, suburbParameter, phoneNumberParameter, towncityUrbanParameter, towncityDeliveryParameter, deliveryServiceIdentifierParameter, boxLobbyParameter, addressParameter, countryIDParameter, basicSearchKeywordsParameter, contactOrganisationPersonNameParameter, linkedContactRelationshipTypeIDsParameter, cdfCriteriaParameter, errorCode, searchHeaderID);
    
    	}
    	public void DuplicateContactSearch(Nullable<long> scopeObjectTypeID, Nullable<long> userID, Nullable<bool> isSpatialSearch, string spatialIDs, string firstName, string lastName, string organisationName, string emailAddress, string websiteURL, string phoneNumber, string deliveryServiceIdentifier, string deliveryBoxLobby, string deliveryTownCity, string urbanStreetName, string urbanSuburb, string urbanTownCity, string overseasAddressLine1, string overseasAddressLine2, string overseasAddressLine3, string overseasAddressLine4, string overseasAddressLine5, Nullable<long> overseasCountryREFID, ObjectParameter errorCode, ObjectParameter searchHeaderID)    
    	{
    
    		ObjectParameter scopeObjectTypeIDParameter;
    
    		if (scopeObjectTypeID.HasValue)
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", scopeObjectTypeID);
    		}
    		else
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", typeof(long));
    		}
    
    		ObjectParameter userIDParameter;
    
    		if (userID.HasValue)
    		{
    			userIDParameter = new ObjectParameter("UserID", userID);
    		}
    		else
    		{
    			userIDParameter = new ObjectParameter("UserID", typeof(long));
    		}
    
    		ObjectParameter isSpatialSearchParameter;
    
    		if (isSpatialSearch.HasValue)
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", isSpatialSearch);
    		}
    		else
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", typeof(bool));
    		}
    
    		ObjectParameter spatialIDsParameter;
    
    		if (spatialIDs != null)
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", spatialIDs);
    		}
    		else
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", typeof(string));
    		}
    
    		ObjectParameter firstNameParameter;
    
    		if (firstName != null)
    		{
    			firstNameParameter = new ObjectParameter("firstName", firstName);
    		}
    		else
    		{
    			firstNameParameter = new ObjectParameter("firstName", typeof(string));
    		}
    
    		ObjectParameter lastNameParameter;
    
    		if (lastName != null)
    		{
    			lastNameParameter = new ObjectParameter("lastName", lastName);
    		}
    		else
    		{
    			lastNameParameter = new ObjectParameter("lastName", typeof(string));
    		}
    
    		ObjectParameter organisationNameParameter;
    
    		if (organisationName != null)
    		{
    			organisationNameParameter = new ObjectParameter("organisationName", organisationName);
    		}
    		else
    		{
    			organisationNameParameter = new ObjectParameter("organisationName", typeof(string));
    		}
    
    		ObjectParameter emailAddressParameter;
    
    		if (emailAddress != null)
    		{
    			emailAddressParameter = new ObjectParameter("emailAddress", emailAddress);
    		}
    		else
    		{
    			emailAddressParameter = new ObjectParameter("emailAddress", typeof(string));
    		}
    
    		ObjectParameter websiteURLParameter;
    
    		if (websiteURL != null)
    		{
    			websiteURLParameter = new ObjectParameter("websiteURL", websiteURL);
    		}
    		else
    		{
    			websiteURLParameter = new ObjectParameter("websiteURL", typeof(string));
    		}
    
    		ObjectParameter phoneNumberParameter;
    
    		if (phoneNumber != null)
    		{
    			phoneNumberParameter = new ObjectParameter("phoneNumber", phoneNumber);
    		}
    		else
    		{
    			phoneNumberParameter = new ObjectParameter("phoneNumber", typeof(string));
    		}
    
    		ObjectParameter deliveryServiceIdentifierParameter;
    
    		if (deliveryServiceIdentifier != null)
    		{
    			deliveryServiceIdentifierParameter = new ObjectParameter("deliveryServiceIdentifier", deliveryServiceIdentifier);
    		}
    		else
    		{
    			deliveryServiceIdentifierParameter = new ObjectParameter("deliveryServiceIdentifier", typeof(string));
    		}
    
    		ObjectParameter deliveryBoxLobbyParameter;
    
    		if (deliveryBoxLobby != null)
    		{
    			deliveryBoxLobbyParameter = new ObjectParameter("deliveryBoxLobby", deliveryBoxLobby);
    		}
    		else
    		{
    			deliveryBoxLobbyParameter = new ObjectParameter("deliveryBoxLobby", typeof(string));
    		}
    
    		ObjectParameter deliveryTownCityParameter;
    
    		if (deliveryTownCity != null)
    		{
    			deliveryTownCityParameter = new ObjectParameter("deliveryTownCity", deliveryTownCity);
    		}
    		else
    		{
    			deliveryTownCityParameter = new ObjectParameter("deliveryTownCity", typeof(string));
    		}
    
    		ObjectParameter urbanStreetNameParameter;
    
    		if (urbanStreetName != null)
    		{
    			urbanStreetNameParameter = new ObjectParameter("urbanStreetName", urbanStreetName);
    		}
    		else
    		{
    			urbanStreetNameParameter = new ObjectParameter("urbanStreetName", typeof(string));
    		}
    
    		ObjectParameter urbanSuburbParameter;
    
    		if (urbanSuburb != null)
    		{
    			urbanSuburbParameter = new ObjectParameter("urbanSuburb", urbanSuburb);
    		}
    		else
    		{
    			urbanSuburbParameter = new ObjectParameter("urbanSuburb", typeof(string));
    		}
    
    		ObjectParameter urbanTownCityParameter;
    
    		if (urbanTownCity != null)
    		{
    			urbanTownCityParameter = new ObjectParameter("urbanTownCity", urbanTownCity);
    		}
    		else
    		{
    			urbanTownCityParameter = new ObjectParameter("urbanTownCity", typeof(string));
    		}
    
    		ObjectParameter overseasAddressLine1Parameter;
    
    		if (overseasAddressLine1 != null)
    		{
    			overseasAddressLine1Parameter = new ObjectParameter("overseasAddressLine1", overseasAddressLine1);
    		}
    		else
    		{
    			overseasAddressLine1Parameter = new ObjectParameter("overseasAddressLine1", typeof(string));
    		}
    
    		ObjectParameter overseasAddressLine2Parameter;
    
    		if (overseasAddressLine2 != null)
    		{
    			overseasAddressLine2Parameter = new ObjectParameter("overseasAddressLine2", overseasAddressLine2);
    		}
    		else
    		{
    			overseasAddressLine2Parameter = new ObjectParameter("overseasAddressLine2", typeof(string));
    		}
    
    		ObjectParameter overseasAddressLine3Parameter;
    
    		if (overseasAddressLine3 != null)
    		{
    			overseasAddressLine3Parameter = new ObjectParameter("overseasAddressLine3", overseasAddressLine3);
    		}
    		else
    		{
    			overseasAddressLine3Parameter = new ObjectParameter("overseasAddressLine3", typeof(string));
    		}
    
    		ObjectParameter overseasAddressLine4Parameter;
    
    		if (overseasAddressLine4 != null)
    		{
    			overseasAddressLine4Parameter = new ObjectParameter("overseasAddressLine4", overseasAddressLine4);
    		}
    		else
    		{
    			overseasAddressLine4Parameter = new ObjectParameter("overseasAddressLine4", typeof(string));
    		}
    
    		ObjectParameter overseasAddressLine5Parameter;
    
    		if (overseasAddressLine5 != null)
    		{
    			overseasAddressLine5Parameter = new ObjectParameter("overseasAddressLine5", overseasAddressLine5);
    		}
    		else
    		{
    			overseasAddressLine5Parameter = new ObjectParameter("overseasAddressLine5", typeof(string));
    		}
    
    		ObjectParameter overseasCountryREFIDParameter;
    
    		if (overseasCountryREFID.HasValue)
    		{
    			overseasCountryREFIDParameter = new ObjectParameter("overseasCountryREFID", overseasCountryREFID);
    		}
    		else
    		{
    			overseasCountryREFIDParameter = new ObjectParameter("overseasCountryREFID", typeof(long));
    		}
    		base.ExecuteFunction("DuplicateContactSearch", scopeObjectTypeIDParameter, userIDParameter, isSpatialSearchParameter, spatialIDsParameter, firstNameParameter, lastNameParameter, organisationNameParameter, emailAddressParameter, websiteURLParameter, phoneNumberParameter, deliveryServiceIdentifierParameter, deliveryBoxLobbyParameter, deliveryTownCityParameter, urbanStreetNameParameter, urbanSuburbParameter, urbanTownCityParameter, overseasAddressLine1Parameter, overseasAddressLine2Parameter, overseasAddressLine3Parameter, overseasAddressLine4Parameter, overseasAddressLine5Parameter, overseasCountryREFIDParameter, errorCode, searchHeaderID);
    
    	}
    	public ObjectResult<GetChangedContacts_Result> GetChangedContacts(Nullable<System.DateTime> changedSince)    
    	{
    
    		ObjectParameter changedSinceParameter;
    
    		if (changedSince.HasValue)
    		{
    			changedSinceParameter = new ObjectParameter("ChangedSince", changedSince);
    		}
    		else
    		{
    			changedSinceParameter = new ObjectParameter("ChangedSince", typeof(System.DateTime));
    		}
    		return base.ExecuteFunction<GetChangedContacts_Result>("GetChangedContacts", changedSinceParameter);
    
    	}
    	public void CalculateInformationSwornDueDate(Nullable<long> enforcementID, ObjectParameter dueDate)    
    	{
    
    		ObjectParameter enforcementIDParameter;
    
    		if (enforcementID.HasValue)
    		{
    			enforcementIDParameter = new ObjectParameter("EnforcementID", enforcementID);
    		}
    		else
    		{
    			enforcementIDParameter = new ObjectParameter("EnforcementID", typeof(long));
    		}
    		base.ExecuteFunction("CalculateInformationSwornDueDate", enforcementIDParameter, dueDate);
    
    	}
    	public void CalculateInfringementNoticeServedDueDate(Nullable<long> iRISObjectID, ObjectParameter dueDate)    
    	{
    
    		ObjectParameter iRISObjectIDParameter;
    
    		if (iRISObjectID.HasValue)
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", iRISObjectID);
    		}
    		else
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", typeof(long));
    		}
    		base.ExecuteFunction("CalculateInfringementNoticeServedDueDate", iRISObjectIDParameter, dueDate);
    
    	}
    	public void AdvancedSearchEnforcement(Nullable<long> scopeObjectTypeID, Nullable<long> userID, Nullable<bool> isSpatialSearch, string spatialIDs, string briefDescription, Nullable<long> actionREFID, Nullable<long> actionTypeREFID, Nullable<long> actREFID, Nullable<long> offenceSectionREFID, Nullable<long> natureOfOffenceREFID, Nullable<System.DateTime> offenceStart, Nullable<System.DateTime> offenceEnd, Nullable<long> officerResponsible, Nullable<long> statusREFID, string basicSearchKeywords, string contactOrganisationPersonName, string linkedContactRelationshipTypeIDs, string cdfCriteria, ObjectParameter errorCode, ObjectParameter searchHeaderID)    
    	{
    
    		ObjectParameter scopeObjectTypeIDParameter;
    
    		if (scopeObjectTypeID.HasValue)
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", scopeObjectTypeID);
    		}
    		else
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", typeof(long));
    		}
    
    		ObjectParameter userIDParameter;
    
    		if (userID.HasValue)
    		{
    			userIDParameter = new ObjectParameter("UserID", userID);
    		}
    		else
    		{
    			userIDParameter = new ObjectParameter("UserID", typeof(long));
    		}
    
    		ObjectParameter isSpatialSearchParameter;
    
    		if (isSpatialSearch.HasValue)
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", isSpatialSearch);
    		}
    		else
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", typeof(bool));
    		}
    
    		ObjectParameter spatialIDsParameter;
    
    		if (spatialIDs != null)
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", spatialIDs);
    		}
    		else
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", typeof(string));
    		}
    
    		ObjectParameter briefDescriptionParameter;
    
    		if (briefDescription != null)
    		{
    			briefDescriptionParameter = new ObjectParameter("BriefDescription", briefDescription);
    		}
    		else
    		{
    			briefDescriptionParameter = new ObjectParameter("BriefDescription", typeof(string));
    		}
    
    		ObjectParameter actionREFIDParameter;
    
    		if (actionREFID.HasValue)
    		{
    			actionREFIDParameter = new ObjectParameter("ActionREFID", actionREFID);
    		}
    		else
    		{
    			actionREFIDParameter = new ObjectParameter("ActionREFID", typeof(long));
    		}
    
    		ObjectParameter actionTypeREFIDParameter;
    
    		if (actionTypeREFID.HasValue)
    		{
    			actionTypeREFIDParameter = new ObjectParameter("ActionTypeREFID", actionTypeREFID);
    		}
    		else
    		{
    			actionTypeREFIDParameter = new ObjectParameter("ActionTypeREFID", typeof(long));
    		}
    
    		ObjectParameter actREFIDParameter;
    
    		if (actREFID.HasValue)
    		{
    			actREFIDParameter = new ObjectParameter("ActREFID", actREFID);
    		}
    		else
    		{
    			actREFIDParameter = new ObjectParameter("ActREFID", typeof(long));
    		}
    
    		ObjectParameter offenceSectionREFIDParameter;
    
    		if (offenceSectionREFID.HasValue)
    		{
    			offenceSectionREFIDParameter = new ObjectParameter("OffenceSectionREFID", offenceSectionREFID);
    		}
    		else
    		{
    			offenceSectionREFIDParameter = new ObjectParameter("OffenceSectionREFID", typeof(long));
    		}
    
    		ObjectParameter natureOfOffenceREFIDParameter;
    
    		if (natureOfOffenceREFID.HasValue)
    		{
    			natureOfOffenceREFIDParameter = new ObjectParameter("NatureOfOffenceREFID", natureOfOffenceREFID);
    		}
    		else
    		{
    			natureOfOffenceREFIDParameter = new ObjectParameter("NatureOfOffenceREFID", typeof(long));
    		}
    
    		ObjectParameter offenceStartParameter;
    
    		if (offenceStart.HasValue)
    		{
    			offenceStartParameter = new ObjectParameter("OffenceStart", offenceStart);
    		}
    		else
    		{
    			offenceStartParameter = new ObjectParameter("OffenceStart", typeof(System.DateTime));
    		}
    
    		ObjectParameter offenceEndParameter;
    
    		if (offenceEnd.HasValue)
    		{
    			offenceEndParameter = new ObjectParameter("OffenceEnd", offenceEnd);
    		}
    		else
    		{
    			offenceEndParameter = new ObjectParameter("OffenceEnd", typeof(System.DateTime));
    		}
    
    		ObjectParameter officerResponsibleParameter;
    
    		if (officerResponsible.HasValue)
    		{
    			officerResponsibleParameter = new ObjectParameter("OfficerResponsible", officerResponsible);
    		}
    		else
    		{
    			officerResponsibleParameter = new ObjectParameter("OfficerResponsible", typeof(long));
    		}
    
    		ObjectParameter statusREFIDParameter;
    
    		if (statusREFID.HasValue)
    		{
    			statusREFIDParameter = new ObjectParameter("StatusREFID", statusREFID);
    		}
    		else
    		{
    			statusREFIDParameter = new ObjectParameter("StatusREFID", typeof(long));
    		}
    
    		ObjectParameter basicSearchKeywordsParameter;
    
    		if (basicSearchKeywords != null)
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", basicSearchKeywords);
    		}
    		else
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", typeof(string));
    		}
    
    		ObjectParameter contactOrganisationPersonNameParameter;
    
    		if (contactOrganisationPersonName != null)
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", contactOrganisationPersonName);
    		}
    		else
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", typeof(string));
    		}
    
    		ObjectParameter linkedContactRelationshipTypeIDsParameter;
    
    		if (linkedContactRelationshipTypeIDs != null)
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", linkedContactRelationshipTypeIDs);
    		}
    		else
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", typeof(string));
    		}
    
    		ObjectParameter cdfCriteriaParameter;
    
    		if (cdfCriteria != null)
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", cdfCriteria);
    		}
    		else
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", typeof(string));
    		}
    		base.ExecuteFunction("AdvancedSearchEnforcement", scopeObjectTypeIDParameter, userIDParameter, isSpatialSearchParameter, spatialIDsParameter, briefDescriptionParameter, actionREFIDParameter, actionTypeREFIDParameter, actREFIDParameter, offenceSectionREFIDParameter, natureOfOffenceREFIDParameter, offenceStartParameter, offenceEndParameter, officerResponsibleParameter, statusREFIDParameter, basicSearchKeywordsParameter, contactOrganisationPersonNameParameter, linkedContactRelationshipTypeIDsParameter, cdfCriteriaParameter, errorCode, searchHeaderID);
    
    	}
    	public void AdvancedSearchManagementSite(Nullable<long> scopeObjectTypeID, Nullable<long> userID, Nullable<bool> isSpatialSearch, string spatialIDs, string managementSiteTypeID, string managementSiteSubtypeIDs, Nullable<long> officerResponsibleID, Nullable<long> habitatID, Nullable<long> statusID, Nullable<long> classificationTypeID, string classificationIDs, Nullable<long> conservationSpeciesTypeID, Nullable<long> conservationSpeciesID, Nullable<long> threatSpeciesTypeID, Nullable<long> threatSpeciesID, Nullable<long> industryPurposeID, Nullable<long> situationID, string description, string basicSearchKeywords, string contactOrganisationPersonName, string linkedContactRelationshipTypeIDs, string cdfCriteria, ObjectParameter errorCode, ObjectParameter searchHeaderID)    
    	{
    
    		ObjectParameter scopeObjectTypeIDParameter;
    
    		if (scopeObjectTypeID.HasValue)
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", scopeObjectTypeID);
    		}
    		else
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", typeof(long));
    		}
    
    		ObjectParameter userIDParameter;
    
    		if (userID.HasValue)
    		{
    			userIDParameter = new ObjectParameter("UserID", userID);
    		}
    		else
    		{
    			userIDParameter = new ObjectParameter("UserID", typeof(long));
    		}
    
    		ObjectParameter isSpatialSearchParameter;
    
    		if (isSpatialSearch.HasValue)
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", isSpatialSearch);
    		}
    		else
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", typeof(bool));
    		}
    
    		ObjectParameter spatialIDsParameter;
    
    		if (spatialIDs != null)
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", spatialIDs);
    		}
    		else
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", typeof(string));
    		}
    
    		ObjectParameter managementSiteTypeIDParameter;
    
    		if (managementSiteTypeID != null)
    		{
    			managementSiteTypeIDParameter = new ObjectParameter("ManagementSiteTypeID", managementSiteTypeID);
    		}
    		else
    		{
    			managementSiteTypeIDParameter = new ObjectParameter("ManagementSiteTypeID", typeof(string));
    		}
    
    		ObjectParameter managementSiteSubtypeIDsParameter;
    
    		if (managementSiteSubtypeIDs != null)
    		{
    			managementSiteSubtypeIDsParameter = new ObjectParameter("ManagementSiteSubtypeIDs", managementSiteSubtypeIDs);
    		}
    		else
    		{
    			managementSiteSubtypeIDsParameter = new ObjectParameter("ManagementSiteSubtypeIDs", typeof(string));
    		}
    
    		ObjectParameter officerResponsibleIDParameter;
    
    		if (officerResponsibleID.HasValue)
    		{
    			officerResponsibleIDParameter = new ObjectParameter("OfficerResponsibleID", officerResponsibleID);
    		}
    		else
    		{
    			officerResponsibleIDParameter = new ObjectParameter("OfficerResponsibleID", typeof(long));
    		}
    
    		ObjectParameter habitatIDParameter;
    
    		if (habitatID.HasValue)
    		{
    			habitatIDParameter = new ObjectParameter("HabitatID", habitatID);
    		}
    		else
    		{
    			habitatIDParameter = new ObjectParameter("HabitatID", typeof(long));
    		}
    
    		ObjectParameter statusIDParameter;
    
    		if (statusID.HasValue)
    		{
    			statusIDParameter = new ObjectParameter("StatusID", statusID);
    		}
    		else
    		{
    			statusIDParameter = new ObjectParameter("StatusID", typeof(long));
    		}
    
    		ObjectParameter classificationTypeIDParameter;
    
    		if (classificationTypeID.HasValue)
    		{
    			classificationTypeIDParameter = new ObjectParameter("ClassificationTypeID", classificationTypeID);
    		}
    		else
    		{
    			classificationTypeIDParameter = new ObjectParameter("ClassificationTypeID", typeof(long));
    		}
    
    		ObjectParameter classificationIDsParameter;
    
    		if (classificationIDs != null)
    		{
    			classificationIDsParameter = new ObjectParameter("ClassificationIDs", classificationIDs);
    		}
    		else
    		{
    			classificationIDsParameter = new ObjectParameter("ClassificationIDs", typeof(string));
    		}
    
    		ObjectParameter conservationSpeciesTypeIDParameter;
    
    		if (conservationSpeciesTypeID.HasValue)
    		{
    			conservationSpeciesTypeIDParameter = new ObjectParameter("ConservationSpeciesTypeID", conservationSpeciesTypeID);
    		}
    		else
    		{
    			conservationSpeciesTypeIDParameter = new ObjectParameter("ConservationSpeciesTypeID", typeof(long));
    		}
    
    		ObjectParameter conservationSpeciesIDParameter;
    
    		if (conservationSpeciesID.HasValue)
    		{
    			conservationSpeciesIDParameter = new ObjectParameter("ConservationSpeciesID", conservationSpeciesID);
    		}
    		else
    		{
    			conservationSpeciesIDParameter = new ObjectParameter("ConservationSpeciesID", typeof(long));
    		}
    
    		ObjectParameter threatSpeciesTypeIDParameter;
    
    		if (threatSpeciesTypeID.HasValue)
    		{
    			threatSpeciesTypeIDParameter = new ObjectParameter("ThreatSpeciesTypeID", threatSpeciesTypeID);
    		}
    		else
    		{
    			threatSpeciesTypeIDParameter = new ObjectParameter("ThreatSpeciesTypeID", typeof(long));
    		}
    
    		ObjectParameter threatSpeciesIDParameter;
    
    		if (threatSpeciesID.HasValue)
    		{
    			threatSpeciesIDParameter = new ObjectParameter("ThreatSpeciesID", threatSpeciesID);
    		}
    		else
    		{
    			threatSpeciesIDParameter = new ObjectParameter("ThreatSpeciesID", typeof(long));
    		}
    
    		ObjectParameter industryPurposeIDParameter;
    
    		if (industryPurposeID.HasValue)
    		{
    			industryPurposeIDParameter = new ObjectParameter("IndustryPurposeID", industryPurposeID);
    		}
    		else
    		{
    			industryPurposeIDParameter = new ObjectParameter("IndustryPurposeID", typeof(long));
    		}
    
    		ObjectParameter situationIDParameter;
    
    		if (situationID.HasValue)
    		{
    			situationIDParameter = new ObjectParameter("SituationID", situationID);
    		}
    		else
    		{
    			situationIDParameter = new ObjectParameter("SituationID", typeof(long));
    		}
    
    		ObjectParameter descriptionParameter;
    
    		if (description != null)
    		{
    			descriptionParameter = new ObjectParameter("Description", description);
    		}
    		else
    		{
    			descriptionParameter = new ObjectParameter("Description", typeof(string));
    		}
    
    		ObjectParameter basicSearchKeywordsParameter;
    
    		if (basicSearchKeywords != null)
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", basicSearchKeywords);
    		}
    		else
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", typeof(string));
    		}
    
    		ObjectParameter contactOrganisationPersonNameParameter;
    
    		if (contactOrganisationPersonName != null)
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", contactOrganisationPersonName);
    		}
    		else
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", typeof(string));
    		}
    
    		ObjectParameter linkedContactRelationshipTypeIDsParameter;
    
    		if (linkedContactRelationshipTypeIDs != null)
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", linkedContactRelationshipTypeIDs);
    		}
    		else
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", typeof(string));
    		}
    
    		ObjectParameter cdfCriteriaParameter;
    
    		if (cdfCriteria != null)
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", cdfCriteria);
    		}
    		else
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", typeof(string));
    		}
    		base.ExecuteFunction("AdvancedSearchManagementSite", scopeObjectTypeIDParameter, userIDParameter, isSpatialSearchParameter, spatialIDsParameter, managementSiteTypeIDParameter, managementSiteSubtypeIDsParameter, officerResponsibleIDParameter, habitatIDParameter, statusIDParameter, classificationTypeIDParameter, classificationIDsParameter, conservationSpeciesTypeIDParameter, conservationSpeciesIDParameter, threatSpeciesTypeIDParameter, threatSpeciesIDParameter, industryPurposeIDParameter, situationIDParameter, descriptionParameter, basicSearchKeywordsParameter, contactOrganisationPersonNameParameter, linkedContactRelationshipTypeIDsParameter, cdfCriteriaParameter, errorCode, searchHeaderID);
    
    	}
    	public void ObservationMngtMonitoring_TargetSpeciesResultPercent(Nullable<long> observationMngtID, ObjectParameter lineMonitoringTargetSpeciesResultPercent)    
    	{
    
    		ObjectParameter observationMngtIDParameter;
    
    		if (observationMngtID.HasValue)
    		{
    			observationMngtIDParameter = new ObjectParameter("ObservationMngtID", observationMngtID);
    		}
    		else
    		{
    			observationMngtIDParameter = new ObjectParameter("ObservationMngtID", typeof(long));
    		}
    		base.ExecuteFunction("ObservationMngtMonitoring_TargetSpeciesResultPercent", observationMngtIDParameter, lineMonitoringTargetSpeciesResultPercent);
    
    	}
    	public ObjectResult<ObservationRemediationSummary> GetListObservationRemediationSummary(Nullable<long> iRISObjectID, string userName)    
    	{
    
    		ObjectParameter iRISObjectIDParameter;
    
    		if (iRISObjectID.HasValue)
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", iRISObjectID);
    		}
    		else
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", typeof(long));
    		}
    
    		ObjectParameter userNameParameter;
    
    		if (userName != null)
    		{
    			userNameParameter = new ObjectParameter("UserName", userName);
    		}
    		else
    		{
    			userNameParameter = new ObjectParameter("UserName", typeof(string));
    		}
    		return base.ExecuteFunction<ObservationRemediationSummary>("GetListObservationRemediationSummary", iRISObjectIDParameter, userNameParameter);
    
    	}
    	public void LinkObservationToManagementSite(Nullable<long> observationID, Nullable<long> managementSiteID, string currentUser)    
    	{
    
    		ObjectParameter observationIDParameter;
    
    		if (observationID.HasValue)
    		{
    			observationIDParameter = new ObjectParameter("ObservationID", observationID);
    		}
    		else
    		{
    			observationIDParameter = new ObjectParameter("ObservationID", typeof(long));
    		}
    
    		ObjectParameter managementSiteIDParameter;
    
    		if (managementSiteID.HasValue)
    		{
    			managementSiteIDParameter = new ObjectParameter("ManagementSiteID", managementSiteID);
    		}
    		else
    		{
    			managementSiteIDParameter = new ObjectParameter("ManagementSiteID", typeof(long));
    		}
    
    		ObjectParameter currentUserParameter;
    
    		if (currentUser != null)
    		{
    			currentUserParameter = new ObjectParameter("CurrentUser", currentUser);
    		}
    		else
    		{
    			currentUserParameter = new ObjectParameter("CurrentUser", typeof(string));
    		}
    		base.ExecuteFunction("LinkObservationToManagementSite", observationIDParameter, managementSiteIDParameter, currentUserParameter);
    
    	}
    	public ObjectResult<RegimeActivity> UpdateRegimeActivitiesOfficerResponsibleForRegime(Nullable<long> regimeID, Nullable<long> officerResponsiblePreviousID, Nullable<long> officerResponsibleCurrentID, string currentUserAccountName)    
    	{
    
    		ObjectParameter regimeIDParameter;
    
    		if (regimeID.HasValue)
    		{
    			regimeIDParameter = new ObjectParameter("RegimeID", regimeID);
    		}
    		else
    		{
    			regimeIDParameter = new ObjectParameter("RegimeID", typeof(long));
    		}
    
    		ObjectParameter officerResponsiblePreviousIDParameter;
    
    		if (officerResponsiblePreviousID.HasValue)
    		{
    			officerResponsiblePreviousIDParameter = new ObjectParameter("OfficerResponsiblePreviousID", officerResponsiblePreviousID);
    		}
    		else
    		{
    			officerResponsiblePreviousIDParameter = new ObjectParameter("OfficerResponsiblePreviousID", typeof(long));
    		}
    
    		ObjectParameter officerResponsibleCurrentIDParameter;
    
    		if (officerResponsibleCurrentID.HasValue)
    		{
    			officerResponsibleCurrentIDParameter = new ObjectParameter("OfficerResponsibleCurrentID", officerResponsibleCurrentID);
    		}
    		else
    		{
    			officerResponsibleCurrentIDParameter = new ObjectParameter("OfficerResponsibleCurrentID", typeof(long));
    		}
    
    		ObjectParameter currentUserAccountNameParameter;
    
    		if (currentUserAccountName != null)
    		{
    			currentUserAccountNameParameter = new ObjectParameter("CurrentUserAccountName", currentUserAccountName);
    		}
    		else
    		{
    			currentUserAccountNameParameter = new ObjectParameter("CurrentUserAccountName", typeof(string));
    		}
    		return base.ExecuteFunction<RegimeActivity>("UpdateRegimeActivitiesOfficerResponsibleForRegime", regimeIDParameter, officerResponsiblePreviousIDParameter, officerResponsibleCurrentIDParameter, currentUserAccountNameParameter);
    
    	}
    	public ObjectResult<GetEstimateRatesByFinancialYearId_Result> GetEstimateRatesByFinancialYearId(Nullable<long> financialYearId)    
    	{
    
    		ObjectParameter financialYearIdParameter;
    
    		if (financialYearId.HasValue)
    		{
    			financialYearIdParameter = new ObjectParameter("financialYearId", financialYearId);
    		}
    		else
    		{
    			financialYearIdParameter = new ObjectParameter("financialYearId", typeof(long));
    		}
    		return base.ExecuteFunction<GetEstimateRatesByFinancialYearId_Result>("GetEstimateRatesByFinancialYearId", financialYearIdParameter);
    
    	}
    	public ObjectResult<GetEstimateRatesForFinancialYearId_Result> GetEstimateRatesForFinancialYearId(Nullable<long> financialYearId)    
    	{
    
    		ObjectParameter financialYearIdParameter;
    
    		if (financialYearId.HasValue)
    		{
    			financialYearIdParameter = new ObjectParameter("financialYearId", financialYearId);
    		}
    		else
    		{
    			financialYearIdParameter = new ObjectParameter("financialYearId", typeof(long));
    		}
    		return base.ExecuteFunction<GetEstimateRatesForFinancialYearId_Result>("GetEstimateRatesForFinancialYearId", financialYearIdParameter);
    
    	}
    	public ObjectResult<GetEstimateRatesFromFinancialYearId_Result> GetEstimateRatesFromFinancialYearId(Nullable<long> financialYearId)    
    	{
    
    		ObjectParameter financialYearIdParameter;
    
    		if (financialYearId.HasValue)
    		{
    			financialYearIdParameter = new ObjectParameter("financialYearId", financialYearId);
    		}
    		else
    		{
    			financialYearIdParameter = new ObjectParameter("financialYearId", typeof(long));
    		}
    		return base.ExecuteFunction<GetEstimateRatesFromFinancialYearId_Result>("GetEstimateRatesFromFinancialYearId", financialYearIdParameter);
    
    	}
    	public ObjectResult<GetReferenceDataValueRatesByFinancialYearId_Result> GetReferenceDataValueRatesByFinancialYearId(Nullable<long> financialYearId)    
    	{
    
    		ObjectParameter financialYearIdParameter;
    
    		if (financialYearId.HasValue)
    		{
    			financialYearIdParameter = new ObjectParameter("financialYearId", financialYearId);
    		}
    		else
    		{
    			financialYearIdParameter = new ObjectParameter("financialYearId", typeof(long));
    		}
    		return base.ExecuteFunction<GetReferenceDataValueRatesByFinancialYearId_Result>("GetReferenceDataValueRatesByFinancialYearId", financialYearIdParameter);
    
    	}
    	public ObjectResult<ObservationRemediationSummary> ListObservationRemediationSummary(Nullable<long> iRISObjectID, string userName)    
    	{
    
    		ObjectParameter iRISObjectIDParameter;
    
    		if (iRISObjectID.HasValue)
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", iRISObjectID);
    		}
    		else
    		{
    			iRISObjectIDParameter = new ObjectParameter("IRISObjectID", typeof(long));
    		}
    
    		ObjectParameter userNameParameter;
    
    		if (userName != null)
    		{
    			userNameParameter = new ObjectParameter("UserName", userName);
    		}
    		else
    		{
    			userNameParameter = new ObjectParameter("UserName", typeof(string));
    		}
    		return base.ExecuteFunction<ObservationRemediationSummary>("ListObservationRemediationSummary", iRISObjectIDParameter, userNameParameter);
    
    	}
    	public void PropertyDataImportReset()    
    	{
    		base.ExecuteFunction("PropertyDataImportReset");
    
    	}
    	public void PropertyDataImport(Nullable<long> propertyDataDVRUploadID)    
    	{
    
    		ObjectParameter propertyDataDVRUploadIDParameter;
    
    		if (propertyDataDVRUploadID.HasValue)
    		{
    			propertyDataDVRUploadIDParameter = new ObjectParameter("PropertyDataDVRUploadID", propertyDataDVRUploadID);
    		}
    		else
    		{
    			propertyDataDVRUploadIDParameter = new ObjectParameter("PropertyDataDVRUploadID", typeof(long));
    		}
    		base.ExecuteFunction("PropertyDataImport", propertyDataDVRUploadIDParameter);
    
    	}
    	public void PropertyDataImportDelete(Nullable<long> propertyDataDVRUploadID)    
    	{
    
    		ObjectParameter propertyDataDVRUploadIDParameter;
    
    		if (propertyDataDVRUploadID.HasValue)
    		{
    			propertyDataDVRUploadIDParameter = new ObjectParameter("PropertyDataDVRUploadID", propertyDataDVRUploadID);
    		}
    		else
    		{
    			propertyDataDVRUploadIDParameter = new ObjectParameter("PropertyDataDVRUploadID", typeof(long));
    		}
    		base.ExecuteFunction("PropertyDataImportDelete", propertyDataDVRUploadIDParameter);
    
    	}
    	public void AdvancedSearchSLUS(Nullable<long> scopeObjectTypeID, Nullable<long> userID, string siteDescription, Nullable<bool> isSpatialSearch, string spatialIDs, string siteStatusIDs, string siteClassificationIDs, string siteClassificationContextIDs, string siteHAILGroupIDs, string siteHAILCategoryIDs, string siteContaminantTypeIDs, string siteContaminantIDs, string basicSearchKeywords, string contactOrganisationPersonName, string linkedContactRelationshipTypeIDs, string cdfCriteria, ObjectParameter errorCode, ObjectParameter searchHeaderID)    
    	{
    
    		ObjectParameter scopeObjectTypeIDParameter;
    
    		if (scopeObjectTypeID.HasValue)
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", scopeObjectTypeID);
    		}
    		else
    		{
    			scopeObjectTypeIDParameter = new ObjectParameter("ScopeObjectTypeID", typeof(long));
    		}
    
    		ObjectParameter userIDParameter;
    
    		if (userID.HasValue)
    		{
    			userIDParameter = new ObjectParameter("UserID", userID);
    		}
    		else
    		{
    			userIDParameter = new ObjectParameter("UserID", typeof(long));
    		}
    
    		ObjectParameter siteDescriptionParameter;
    
    		if (siteDescription != null)
    		{
    			siteDescriptionParameter = new ObjectParameter("SiteDescription", siteDescription);
    		}
    		else
    		{
    			siteDescriptionParameter = new ObjectParameter("SiteDescription", typeof(string));
    		}
    
    		ObjectParameter isSpatialSearchParameter;
    
    		if (isSpatialSearch.HasValue)
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", isSpatialSearch);
    		}
    		else
    		{
    			isSpatialSearchParameter = new ObjectParameter("IsSpatialSearch", typeof(bool));
    		}
    
    		ObjectParameter spatialIDsParameter;
    
    		if (spatialIDs != null)
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", spatialIDs);
    		}
    		else
    		{
    			spatialIDsParameter = new ObjectParameter("SpatialIDs", typeof(string));
    		}
    
    		ObjectParameter siteStatusIDsParameter;
    
    		if (siteStatusIDs != null)
    		{
    			siteStatusIDsParameter = new ObjectParameter("SiteStatusIDs", siteStatusIDs);
    		}
    		else
    		{
    			siteStatusIDsParameter = new ObjectParameter("SiteStatusIDs", typeof(string));
    		}
    
    		ObjectParameter siteClassificationIDsParameter;
    
    		if (siteClassificationIDs != null)
    		{
    			siteClassificationIDsParameter = new ObjectParameter("SiteClassificationIDs", siteClassificationIDs);
    		}
    		else
    		{
    			siteClassificationIDsParameter = new ObjectParameter("SiteClassificationIDs", typeof(string));
    		}
    
    		ObjectParameter siteClassificationContextIDsParameter;
    
    		if (siteClassificationContextIDs != null)
    		{
    			siteClassificationContextIDsParameter = new ObjectParameter("SiteClassificationContextIDs", siteClassificationContextIDs);
    		}
    		else
    		{
    			siteClassificationContextIDsParameter = new ObjectParameter("SiteClassificationContextIDs", typeof(string));
    		}
    
    		ObjectParameter siteHAILGroupIDsParameter;
    
    		if (siteHAILGroupIDs != null)
    		{
    			siteHAILGroupIDsParameter = new ObjectParameter("SiteHAILGroupIDs", siteHAILGroupIDs);
    		}
    		else
    		{
    			siteHAILGroupIDsParameter = new ObjectParameter("SiteHAILGroupIDs", typeof(string));
    		}
    
    		ObjectParameter siteHAILCategoryIDsParameter;
    
    		if (siteHAILCategoryIDs != null)
    		{
    			siteHAILCategoryIDsParameter = new ObjectParameter("SiteHAILCategoryIDs", siteHAILCategoryIDs);
    		}
    		else
    		{
    			siteHAILCategoryIDsParameter = new ObjectParameter("SiteHAILCategoryIDs", typeof(string));
    		}
    
    		ObjectParameter siteContaminantTypeIDsParameter;
    
    		if (siteContaminantTypeIDs != null)
    		{
    			siteContaminantTypeIDsParameter = new ObjectParameter("SiteContaminantTypeIDs", siteContaminantTypeIDs);
    		}
    		else
    		{
    			siteContaminantTypeIDsParameter = new ObjectParameter("SiteContaminantTypeIDs", typeof(string));
    		}
    
    		ObjectParameter siteContaminantIDsParameter;
    
    		if (siteContaminantIDs != null)
    		{
    			siteContaminantIDsParameter = new ObjectParameter("SiteContaminantIDs", siteContaminantIDs);
    		}
    		else
    		{
    			siteContaminantIDsParameter = new ObjectParameter("SiteContaminantIDs", typeof(string));
    		}
    
    		ObjectParameter basicSearchKeywordsParameter;
    
    		if (basicSearchKeywords != null)
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", basicSearchKeywords);
    		}
    		else
    		{
    			basicSearchKeywordsParameter = new ObjectParameter("BasicSearchKeywords", typeof(string));
    		}
    
    		ObjectParameter contactOrganisationPersonNameParameter;
    
    		if (contactOrganisationPersonName != null)
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", contactOrganisationPersonName);
    		}
    		else
    		{
    			contactOrganisationPersonNameParameter = new ObjectParameter("ContactOrganisationPersonName", typeof(string));
    		}
    
    		ObjectParameter linkedContactRelationshipTypeIDsParameter;
    
    		if (linkedContactRelationshipTypeIDs != null)
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", linkedContactRelationshipTypeIDs);
    		}
    		else
    		{
    			linkedContactRelationshipTypeIDsParameter = new ObjectParameter("LinkedContactRelationshipTypeIDs", typeof(string));
    		}
    
    		ObjectParameter cdfCriteriaParameter;
    
    		if (cdfCriteria != null)
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", cdfCriteria);
    		}
    		else
    		{
    			cdfCriteriaParameter = new ObjectParameter("CdfCriteria", typeof(string));
    		}
    		base.ExecuteFunction("AdvancedSearchSLUS", scopeObjectTypeIDParameter, userIDParameter, siteDescriptionParameter, isSpatialSearchParameter, spatialIDsParameter, siteStatusIDsParameter, siteClassificationIDsParameter, siteClassificationContextIDsParameter, siteHAILGroupIDsParameter, siteHAILCategoryIDsParameter, siteContaminantTypeIDsParameter, siteContaminantIDsParameter, basicSearchKeywordsParameter, contactOrganisationPersonNameParameter, linkedContactRelationshipTypeIDsParameter, cdfCriteriaParameter, errorCode, searchHeaderID);
    
    	}

        #endregion

    }
}
