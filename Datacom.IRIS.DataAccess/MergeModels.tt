<#@ template debug="True" hostspecific="true" language="C#" #>
<#@ output extension=".Report.txt" #>
<#@ assembly name="$(SolutionDir)Source\Datacom.IRIS.Common\bin\Debug\Datacom.IRIS.Common.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Datacom.IRIS.Common.Utils.EntityFramework.ModelMerging" #>
+====================+
| Model Merge Report |
+====================+
<#  this.Write(Environment.NewLine); #>
<#= DateTime.Now.ToString("ddd, dd MMM yyyy HH':'mm':'ss'.'fff 'GMT'")  #>
<#  this.Write(Environment.NewLine); #>
Running Report ...
<#  this.Write(Environment.NewLine); #>
<# RunMerge(Path.GetDirectoryName(Host.TemplateFile)); #>
<#  this.Write(Environment.NewLine); #>
<#  this.Write(Environment.NewLine); #>
<#= DateTime.Now.ToString("ddd, dd MMM yyyy HH':'mm':'ss'.'fff 'GMT'")  #>
<#  this.Write(Environment.NewLine); #>
***   E N D   O F   R E P O R T   ***

<#+  public void RunMerge(string path) 
{
	this.Write("Path: " + path);
	var ignoreThisModel = "mergedSchema.NoDesigner.edmx";
	var models = ModelFinderService.Find(new[] { path }, ignoreThisModel);
	this.Write(Environment.NewLine); 
	this.Write(Environment.NewLine); 
	this.Write("Models Found:");
	this.Write(Environment.NewLine); 
	foreach (var model in models)
	{
		this.Write("   " + model.Name);
		this.Write(Environment.NewLine);
	}

	var mergeService = ModelMergerService.New(models);
	mergeService.ConcurrencyWarningExclusions.Add("NavigationHistory");
	var mergeInfo = mergeService.MergeModels(path);	
	this.Write(Environment.NewLine);
	string mergeResult;
	if (mergeInfo.Result == true)
	{
		
		mergeResult = string.Format("Successful");
		if (mergeInfo.ValidationWarningMessages.Count != 0)
		{
			mergeResult += string.Format(", with {0} validation warning(s). Please review them at the end of the report.", mergeInfo.ValidationWarningMessages.Count);
		}
	}
	else
	{
		mergeResult = "Failed, " + mergeInfo.Message;
	}
	this.Write(string.Format("Merge Result: {0}",mergeResult));
	this.Write(Environment.NewLine);
	this.Write(string.Format("   Conceptual File: {0}", mergeInfo.ConceptualSchemaFilePath));
	this.Write(Environment.NewLine);
	this.Write(string.Format("    Datastore File: {0}", mergeInfo.DatastoreSchemaFilePath));
	this.Write(Environment.NewLine);
	this.Write(string.Format("      Mapping File: {0}", mergeInfo.MappingSchemaFilePath));
	this.Write(Environment.NewLine);
	this.Write(Environment.NewLine);
	this.Write(string.Format("  ----- There are total {0} validition warning(s). ----- ", mergeInfo.ValidationWarningMessages.Count));
	foreach (var warningMsg in mergeInfo.ValidationWarningMessages)
	{
		this.Write(Environment.NewLine);
		this.Write(string.Format("[Warning]: {0} - {1}", warningMsg.Key, warningMsg.Value));
	}
} 
#>

